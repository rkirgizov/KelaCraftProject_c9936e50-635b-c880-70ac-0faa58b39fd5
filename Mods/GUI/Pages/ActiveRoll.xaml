<ls:UIWidget xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:ls="clr-namespace:ls;assembly=Code"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             mc:Ignorable="d"
             d:DataContext="{d:DesignInstance Type=ls:DCActiveRoll}"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:System="clr-namespace:System;assembly=mscorlib"
             x:Name="ActiveRoll"
             ls:UIWidget.ContextName="ActiveRoll"
             ls:UIWidget.UseCustomDC="True"
             Tag="0"
             d:DesignHeight="2160" d:DesignWidth="3840">
    <ls:UIWidget.Template>
        <ControlTemplate TargetType="ls:UIWidget">
            <ControlTemplate.Resources>
                <ResourceDictionary>
                    <ResourceDictionary.MergedDictionaries>
                        <ResourceDictionary Source="/Core;component/Library/DiceAnimation.xaml"/>
                    </ResourceDictionary.MergedDictionaries>

                    <System:Double x:Key="ResultTextViewBoxWidth">500</System:Double>

                    <Style x:Key="BaseTxtStyle" TargetType="{x:Type TextBlock}">
                        <Setter Property="FontSize" Value="{StaticResource DefaultFontSize}"/>
                        <Setter Property="Background" Value="Transparent"/>
                        <Setter Property="Foreground" Value="{StaticResource LS_baseTxtColor}"/>
                        <Setter Property="noesis:Text.Stroke" Value="{StaticResource LS_tint00}"/>
                        <Setter Property="noesis:Text.StrokeThickness" Value="6"/>
                        <Setter Property="TextAlignment" Value="Center"/>
                        <Setter Property="TextWrapping" Value="Wrap"/>
                        <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
                        <Setter Property="RenderTransform" >
                            <Setter.Value>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform />
                                </TransformGroup>
                            </Setter.Value>
                        </Setter>
                    </Style>

                    <Style x:Key="BonusNameTxtStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource BaseTxtStyle}">
                        <Setter Property="FontSize" Value="{StaticResource SmallFontSize}"/>
                        <Setter Property="LineHeight" Value="{StaticResource SmallFontSizeLineHeight}"/>
                        <Setter Property="LineStackingStrategy" Value="BlockLineHeight"/>
                        <Setter Property="MaxWidth" Value="208"/>
                    </Style>

                    <Style x:Key="BonusValueTxtStyle" TargetType="{x:Type TextBlock}"  BasedOn="{StaticResource BaseTxtStyle}">
                        <Setter Property="FontSize" Value="{StaticResource LargeFontSize}"/>
                        <Setter Property="Foreground" Value="{StaticResource LS_extraspecialTxtColor}"/>
                    </Style>

                    <System:Double x:Key="BoostContentHeight">216</System:Double>
                    <System:Double x:Key="BoostContentWidth">212</System:Double>

                    <System:Double x:Key="BoostIconHeight">82</System:Double>
                    <System:Double x:Key="BoostIconWidth">82</System:Double>

                    <ImageSource x:Key="DialogueSeparatorImage">pack://application:,,,/Core;component/Assets/ActiveRoll/dialogueSeparator.png</ImageSource>
                    <ImageSource x:Key="ItemSlotImage">pack://application:,,,/Core;component/Assets/ActiveRoll/itemSlot.png</ImageSource>
                    <ImageSource x:Key="ItemModifierBucketImage">pack://application:,,,/Core;component/Assets/ActiveRoll/activeModifierBucket_white_d.png</ImageSource>
                    <ImageSource x:Key="ItemModifierBucketImageHover">pack://application:,,,/Core;component/Assets/ActiveRoll/activeModifierBucket_white_h.png</ImageSource>
                    <ImageSource x:Key="RollPromptImage">pack://application:,,,/Core;component/Assets/ActiveRoll/rollPrompt.png</ImageSource>
                    <ImageSource x:Key="DiceSelectorBackgroundImage">pack://application:,,,/Core;component/Assets/DiceSelector/diceSelector_bg.png</ImageSource>

                    <ControlTemplate x:Key="ModifierTemplate" TargetType="ls:LSListBoxItem">
                        <Grid Width="224" x:Name="ModHolder" Opacity="0">
                            <Grid.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform />
                                </TransformGroup>
                            </Grid.RenderTransform>
                            <b:Interaction.Triggers>

                                <b:EventTrigger EventName="MouseEnter">
                                    <ls:LSPlaySound Sound="UI_Shared_Hover" />
                                </b:EventTrigger>

                                <b:EventTrigger EventName="MouseLeftButtonDown">
                                    <ls:LSPlaySound Sound="UI_HUD_DiceRoll_Bonus_Press" />
                                </b:EventTrigger>

                                <b:EventTrigger EventName="MouseLeftButtonUp">
                                    <ls:LSPlaySound Sound="UI_Shared_Click" />
                                </b:EventTrigger>

                                <b:DataTrigger Binding="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType=ls:LSListBoxItem}}" Value="BlinkHl">
                                    <b:ControlStoryboardAction ControlStoryboardOption="Play">
                                        <b:ControlStoryboardAction.Storyboard>
                                            <Storyboard FillBehavior="Stop">
                                                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="bgImgHL">
                                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                                    <DiscreteObjectKeyFrame KeyTime="{StaticResource HLAnimTime2}" Value="{x:Static Visibility.Hidden}"/>
                                                </ObjectAnimationUsingKeyFrames>

                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="bgImgHL">
                                                    <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
                                                    <LinearDoubleKeyFrame KeyTime="{StaticResource HLAnimTime1}" Value="1"/>
                                                    <LinearDoubleKeyFrame KeyTime="{StaticResource HLAnimTime2}" Value="1"/>
                                                    <LinearDoubleKeyFrame KeyTime="{StaticResource HLAnimTime3}" Value="0"/>
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </b:ControlStoryboardAction.Storyboard>
                                    </b:ControlStoryboardAction>
                                </b:DataTrigger>

                                <b:DataTrigger Binding="{Binding Path=(ls:SequenceBehavior.PlayElement), RelativeSource={RelativeSource AncestorType=ls:LSListBoxItem}}" Value="True">
                                    <b:ControlStoryboardAction ControlStoryboardOption="Play">
                                        <b:ControlStoryboardAction.Storyboard>
                                            <Storyboard Children="{StaticResource SlideInModAnim}"/>
                                        </b:ControlStoryboardAction.Storyboard>
                                    </b:ControlStoryboardAction>
                                </b:DataTrigger>
                            </b:Interaction.Triggers>

                            <Image x:Name="bgImg" Source="pack://application:,,,/Core;component/Assets/ActiveRoll/activeModifierBucket_d.png" Stretch="None" VerticalAlignment="Top" Visibility="Visible" Margin="-18,0,-18,0"/>
                            <Image x:Name="bgImgHL" Source="pack://application:,,,/Core;component/Assets/ActiveRoll/activeModifierBucket_h.png" Stretch="None" VerticalAlignment="Top" Visibility="Hidden" Margin="-18,0,-18,0"/>
                            <ContentPresenter x:Name="modContent" Margin="0,30" VerticalAlignment="Top"/>
                            <Image x:Name="fgDisabledIco" Source="pack://application:,,,/Core;component/Assets/ActiveRoll/ico_bonusDisabled.png" Stretch="None" VerticalAlignment="Top" Visibility="{Binding IsDisabled, Converter={StaticResource BoolToVisibleConverter}}" Margin="-18,100,-18,0" IsHitTestVisible="False"/>
                        </Grid>
                        <ControlTemplate.Triggers>

                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Visibility" Value="Hidden" TargetName="bgImg"/>
                                <Setter Property="Visibility" Value="Visible" TargetName="bgImgHL"/>
                            </Trigger>

                            <DataTrigger Binding="{Binding IsAdvantage}" Value="True">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                            <MultiDataTrigger >
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsAdvantage}" Value="True"/>
                                    <Condition Binding="{Binding DataContext.RollState,RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Value="WaitForStart"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="IsEnabled" Value="True"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger >
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsAdvantage}" Value="True"/>
                                    <Condition Binding="{Binding DataContext.RollState,RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Value="WaitForReRoll"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="IsEnabled" Value="True"/>
                            </MultiDataTrigger>
                            <DataTrigger Binding="{Binding IsDisabled}" Value="True">
                                <Setter Property="Opacity" Value="{StaticResource DisabledOpacity}" TargetName="bgImg"/>
                                <Setter Property="Visibility" Value="Hidden" TargetName="bgImgHL"/>
                                <Setter Property="Visibility" Value="Visible" TargetName="bgImg"/>
                                <Setter Property="Opacity" Value="{StaticResource DisabledOpacity}" TargetName="modContent"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>

                    <ControlTemplate x:Key="InactiveModifierTemplate"  TargetType="ls:LSListBoxItem">
                        <Grid>
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="MouseEnter">
                                    <ls:LSPlaySound Sound="UI_Shared_Hover" />
                                </b:EventTrigger>

                                <b:EventTrigger EventName="MouseLeftButtonDown">
                                    <ls:LSPlaySound Sound="UI_HUD_DiceRoll_Bonus_Press" />
                                </b:EventTrigger>

                                <b:EventTrigger EventName="MouseLeftButtonUp">
                                    <ls:LSPlaySound Sound="UI_Shared_Click" />
                                </b:EventTrigger>

                                <b:EventTrigger EventName="MouseDown">
                                    <b:Interaction.Behaviors>
                                        <b:ConditionBehavior>
                                            <b:ConditionalExpression>
                                                <b:ComparisonCondition LeftOperand="{Binding Owner.PlayerCharacterProperties.OwnerUserID}" Operator="Equal"
                                                                       RightOperand="{Binding DataContext.CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.OwnerUserID, RelativeSource={RelativeSource AncestorType=ls:UIWidget}}"/>
                                            </b:ConditionalExpression>
                                        </b:ConditionBehavior>
                                    </b:Interaction.Behaviors>
                                    <b:InvokeCommandAction Command="{Binding DataContext.AddModifierCommand, RelativeSource={RelativeSource AncestorType=ls:UIWidget}}">
                                        <b:InvokeCommandAction.CommandParameter>
                                            <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                                <Binding ElementName="BonusTxt" Mode="OneWay"/>
                                                <Binding Source="Top"/>
                                                <Binding Path="DataContext.AddModifierCommand" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                            </MultiBinding>
                                        </b:InvokeCommandAction.CommandParameter>
                                    </b:InvokeCommandAction>
                                </b:EventTrigger>

                            </b:Interaction.Triggers>
                            <Image x:Name="arrowImg" Source="pack://application:,,,/Core;component/Assets/ActiveRoll/addArrow.png" Stretch="None" VerticalAlignment="Top" Visibility="Collapsed"/>
                            <Image x:Name="bgImgDouble" Visibility="Collapsed" Source="pack://application:,,,/Core;component/Assets/ActiveRoll/inactiveModifierBucket_d.png" Stretch="None" VerticalAlignment="Top" Margin="-18,50,-18,0"/>
                            <Image x:Name="bgImg" Source="pack://application:,,,/Core;component/Assets/ActiveRoll/inactiveModifierBucket_d.png" Stretch="None" VerticalAlignment="Top" Margin="-18,56,-18,0"/>
                            <Grid Margin="0,80" VerticalAlignment="Top" >
                                <Viewbox x:Name="BonusTxtHolder" VerticalAlignment="Top" HorizontalAlignment="Center" Margin="0,0,0,20" Width="200" StretchDirection="DownOnly">
                                    <TextBlock x:Name="BonusTxt" Style="{StaticResource BonusValueTxtStyle}" HorizontalAlignment="Center">
                                        <TextBlock.Tag>
                                            <MultiBinding Converter="{StaticResource EqualConverter}">
                                                <Binding Path="MinBonusValue"/>
                                                <Binding Path="MaxBonusValue"/>
                                            </MultiBinding>
                                        </TextBlock.Tag>
                                        <TextBlock.Text>
                                            <MultiBinding StringFormat="{}{0}...{1}">
                                                <Binding Path="MinBonusValue" StringFormat="{}{0:+#;-#;+0}"/>
                                                <Binding Path="MaxBonusValue"/>
                                            </MultiBinding>
                                        </TextBlock.Text>
                                    </TextBlock>
                                </Viewbox>
                                <ContentPresenter Content="{Binding BoostModifier}"/>
                            </Grid>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding ElementName=BonusTxt, Path=Tag}" Value="True">
                                <Setter TargetName="BonusTxt" Property="Text" >
                                    <Setter.Value>
                                        <MultiBinding StringFormat="{}{0:+#;-#;+0}">
                                            <Binding Path="MinBonusValue" />
                                        </MultiBinding>
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding BoostModifier.Count,Converter={StaticResource GreaterThanConverter},ConverterParameter=1}" Value="True">
                                <Setter TargetName="bgImgDouble" Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsAdvantage}" Value="True">
                                <Setter TargetName="BonusTxt" Property="Text" Value="{Binding Source=he770672cgd25bg4ec8g8bb6g6745e6e7576f  , Converter={StaticResource TranslatedStringConverter}}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding DiceTypeSet.Amount,Converter={StaticResource GreaterThanConverter},ConverterParameter=0}" Value="True">
                                <Setter TargetName="BonusTxt" Property="Text" Value="{Binding DiceTypeSet.Str, StringFormat='{}+{0}'}"/>
                            </DataTrigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Source" Value="pack://application:,,,/Core;component/Assets/ActiveRoll/inactiveModifierBucket_h.png" TargetName="bgImg"/>
                                <Setter Property="Visibility" Value="Visible" TargetName="arrowImg"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>


                    <DataTemplate DataType="{x:Type ls:VMCharacterAction}">
                        <Grid Height="{StaticResource BoostContentHeight}" Width="{StaticResource BoostContentWidth}" ToolTip="{StaticResource ManagedTooltip}" ToolTipService.ShowOnDisabled="True" ToolTipService.Placement="Right" Background="Transparent">
                            <Grid Width="{StaticResource BoostIconWidth}" Height="{StaticResource BoostIconHeight}" VerticalAlignment="Center"  Margin="0,0,0,20">
                                <Rectangle Fill="{Binding Icon}"/>
                                <!-- GUS-216305 - Hiding spell slot level, to uncomment or remove according to results -->
                                <!--<TextBlock Text="{Binding SpellSlotLevel, Converter={StaticResource DecimalToRomanConverter}}" Foreground="{StaticResource LS_specialTxtColor}" VerticalAlignment="Bottom" HorizontalAlignment="Right" Height="35" Margin="0,0,3,0" FontSize="32" FontWeight="Bold" noesis:Text.Stroke="#FF000000" noesis:Text.StrokeThickness="5"/>-->
                            </Grid>
                            <TextBlock x:Name="SpellNameText" Text="{Binding Name}" Style="{StaticResource BonusNameTxtStyle}" VerticalAlignment="Bottom"/>

                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                <Image x:Name="img" Stretch="None" Visibility="Collapsed" />
                                <TextBlock x:Name="desc" Text="{Binding Description}" />
                            </StackPanel>


                            <b:Interaction.Triggers>
                                <b:DataTrigger Binding="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType=ls:LSListBoxItem}}" Value="BlinkHl">
                                    <b:InvokeCommandAction Command="{Binding DataContext.PlaySoundEventOnElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                        <b:InvokeCommandAction.CommandParameter>
                                            <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                                <Binding Mode="OneWay" ElementName="img" />
                                                <Binding Source="UI_HUD_DiceRoll_Bonus_Appear"/>
                                            </MultiBinding>
                                        </b:InvokeCommandAction.CommandParameter>
                                    </b:InvokeCommandAction>
                                    <b:InvokeCommandAction Command="{Binding DataContext.PlaySoundEventOnElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                        <b:InvokeCommandAction.CommandParameter>
                                            <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                                <Binding Mode="OneWay" ElementName="img"  />
                                                <Binding Source="UI_HUD_DiceRoll_BonusType_Spell"/>
                                            </MultiBinding>
                                        </b:InvokeCommandAction.CommandParameter>
                                    </b:InvokeCommandAction>
                                </b:DataTrigger>
                            </b:Interaction.Triggers>
                        </Grid>
                    </DataTemplate>

                    <DataTemplate DataType="{x:Type ls:VMPassive}">
                        <Grid Height="{StaticResource BoostContentHeight}" Width="{StaticResource BoostContentWidth}" ToolTip="{StaticResource ManagedTooltip}" ToolTipService.ShowOnDisabled="True" ToolTipService.Placement="Right" Background="Transparent">
                            <Grid Background="{Binding Icon}" Width="{StaticResource BoostIconWidth}" Height="{StaticResource BoostIconHeight}" VerticalAlignment="Center"  Margin="0,0,0,20"/>
                            <TextBlock x:Name="SpellNameText" Text="{Binding Name}" Style="{StaticResource BonusNameTxtStyle}" VerticalAlignment="Bottom"/>

                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                <Image x:Name="img" Stretch="None" Visibility="Collapsed" />
                                <TextBlock x:Name="desc" Text="{Binding Description}" />
                            </StackPanel>

                            <b:Interaction.Triggers>
                                <b:DataTrigger Binding="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType=ls:LSListBoxItem}}" Value="BlinkHl">
                                    <b:InvokeCommandAction Command="{Binding DataContext.PlaySoundEventOnElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                        <b:InvokeCommandAction.CommandParameter>
                                            <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                                <Binding Mode="OneWay" ElementName="img" />
                                                <Binding Source="UI_HUD_DiceRoll_Bonus_Appear"/>
                                            </MultiBinding>
                                        </b:InvokeCommandAction.CommandParameter>
                                    </b:InvokeCommandAction>
                                    <b:InvokeCommandAction Command="{Binding DataContext.PlaySoundEventOnElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                        <b:InvokeCommandAction.CommandParameter>
                                            <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                                <Binding Mode="OneWay" ElementName="img"  />
                                                <Binding Source="UI_HUD_DiceRoll_BonusType_ToggledPassive"/>
                                            </MultiBinding>
                                        </b:InvokeCommandAction.CommandParameter>
                                    </b:InvokeCommandAction>
                                </b:DataTrigger>
                            </b:Interaction.Triggers>
                        </Grid>
                    </DataTemplate>

                    <DataTemplate DataType="{x:Type ls:VMItem}">
                        <Grid Height="{StaticResource BoostContentHeight}" Width="{StaticResource BoostContentWidth}"  Background="Transparent" ToolTip="{StaticResource ManagedTooltip}" ToolTipService.ShowOnDisabled="True" ToolTipService.Placement="Right" >
	                        <ContentPresenter Content="{Binding .}" Style="{StaticResource Style.GameObject}" />
	                        <TextBlock x:Name="label" Tag="UI_HUD_DiceRoll_BonusType_Default" Text="{Binding Name}" VerticalAlignment="Bottom" Style="{StaticResource BonusNameTxtStyle}" />

                            <b:Interaction.Triggers>
                                <b:DataTrigger Binding="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType=ls:LSListBoxItem}}" Value="BlinkHl">
                                    <b:InvokeCommandAction Command="{Binding DataContext.PlaySoundEventOnElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                        <b:InvokeCommandAction.CommandParameter>
                                            <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                                <Binding Mode="OneWay" ElementName="label"  />
                                                <Binding Source="UI_HUD_DiceRoll_Bonus_Appear"/>
                                            </MultiBinding>
                                        </b:InvokeCommandAction.CommandParameter>
                                    </b:InvokeCommandAction>
                                    <b:InvokeCommandAction Command="{Binding DataContext.PlaySoundEventOnElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                        <b:InvokeCommandAction.CommandParameter>
                                            <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                                <Binding Mode="OneWay" ElementName="label" />
                                                <Binding Path="Tag" ElementName="label"/>
                                            </MultiBinding>
                                        </b:InvokeCommandAction.CommandParameter>
                                    </b:InvokeCommandAction>
                                </b:DataTrigger>
                            </b:Interaction.Triggers>
                        </Grid>
                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{Binding UseType}" Value="Potion">
                                <Setter TargetName="label" Property="Tag" Value="UI_HUD_DiceRoll_BonusType_Potion" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding UseType}" Value="Scroll">
                                <Setter TargetName="label" Property="Tag" Value="UI_HUD_DiceRoll_BonusType_Scroll" />
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>

                    <DataTemplate DataType="{x:Type ls:VMAdvantage}">
                        <DataTemplate.Resources>
                            <ImageSource x:Key="SituationalIcon">pack://application:,,,/Core;component/Assets/Shared/Situation.png</ImageSource>
                        </DataTemplate.Resources>
                        <ContentControl x:Name="BoostHolder" ToolTipService.ShowOnDisabled="True" ToolTipService.IsEnabled="True"  ToolTipService.Placement="Right">
                            <ContentControl.ToolTip>
                                <ls:LSTooltip PlayerId="{Binding Path=DataContext.CurrentPlayer.PlayerId, ElementName=ActiveRoll}" ls:TooltipExtender.Owner="{Binding (ls:TooltipExtender.Owner), ElementName=BoostHolder}">
                                    <ls:LSTooltip.Style>
                                        <Style TargetType="ls:LSTooltip" BasedOn="{StaticResource {x:Type ls:LSTooltip}}">
                                            <Setter Property="Content" Value="{Binding Path=DataContext.SourceVM, ElementName=BoostHolder}"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Path=DataContext.SourceVM, ElementName=BoostHolder, Converter={StaticResource NullToBoolFalseConverter}}" Value="False">
                                                    <Setter Property="Content" Value="{Binding DataContext, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ls:LSTooltip.Style>
                                </ls:LSTooltip>
                            </ContentControl.ToolTip>
                            <Grid Height="{StaticResource BoostContentHeight}" Width="{StaticResource BoostContentWidth}">
                                <Image x:Name="AdvantageIcon" VerticalAlignment="Top" Height="48" Width="64"/>
                                <Rectangle x:Name="SourceImage" Width="{StaticResource BoostIconWidth}" Visibility="Hidden" Height="{StaticResource BoostIconHeight}" VerticalAlignment="Center" Margin="0,-12,0,12"/>
                                <Image x:Name="img" Stretch="Uniform" Width="120" Source="{StaticResource SituationalIcon}" />
                                <TextBlock x:Name="desc" Text="{Binding Description}" Style="{StaticResource BonusNameTxtStyle}" VerticalAlignment="Bottom" HorizontalAlignment="Center" />
                            </Grid>
                        </ContentControl>
                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{Binding AdvantageType}" Value="Advantage">
                                <Setter TargetName="AdvantageIcon" Property="Source" Value="pack://application:,,,/Core;component/Assets/ActiveRoll/ico_advantageLarge.png" />
                                <Setter TargetName="desc" Property="Foreground" Value="{StaticResource LS_bonusTxtColor}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding AdvantageType}" Value="Disadvantage">
                                <Setter TargetName="AdvantageIcon" Property="Source" Value="pack://application:,,,/Core;component/Assets/Shared/ico_disadvantage.png"/>
                                <Setter TargetName="desc" Property="Foreground" Value="{StaticResource LS_alertTxtColor}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Description}" Value="">
                                <Setter TargetName="desc" Property="Text" Value="{Binding Source='h7c258c4fg5467g48e5ga704g2ccd2e80dfe6', Converter={StaticResource TranslatedStringConverter}}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding TagReason, Converter={StaticResource NullToBoolFalseConverter}}" Value="True">
                                <Setter TargetName="desc" Property="Text" Value="{Binding TagReason.Name}"/>
                            </DataTrigger>

                            <DataTrigger Binding="{Binding SourceVM,Converter={StaticResource NullToBoolFalseConverter}}" Value="True">
                                <Setter TargetName="img" Property="Visibility" Value="Collapsed" />
                                <Setter TargetName="SourceImage" Property="Visibility" Value="Visible" />
                                <Setter TargetName="SourceImage" Property="Fill" Value="{Binding SourceVM.Icon}" />
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                    <DataTemplate DataType="{x:Type ls:VMBoost}">
                        <ContentControl x:Name="BoostHolder" ToolTipService.ShowOnDisabled="True" ToolTipService.IsEnabled="True"  ToolTipService.Placement="Right">
                            <ContentControl.ToolTip>
                                <ls:LSTooltip PlayerId="{Binding Path=DataContext.CurrentPlayer.PlayerId, ElementName=ActiveRoll}" Content="{Binding Path=DataContext.SourceVM, ElementName=BoostHolder}" ls:TooltipExtender.Owner="{Binding (ls:TooltipExtender.Owner), ElementName=BoostHolder}"/>
                            </ContentControl.ToolTip>
                            <Grid Height="{StaticResource BoostContentHeight}" Width="{StaticResource BoostContentWidth}" Background="Transparent" IsHitTestVisible="False">
                                <Image x:Name="img" Stretch="Uniform" Tag="UI_HUD_DiceRoll_BonusType_Default" Margin="40,0,40,20" Visibility="Collapsed" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                                <Control x:Name="die" Template="{StaticResource DiceImage}" IsHitTestVisible="False" Visibility="Collapsed" Margin="0,-32,0,0" VerticalAlignment="Center" HorizontalAlignment="Center"/>

                                <TextBlock x:Name="value" VerticalAlignment="Top" Text="{Binding Path=Value, StringFormat={}{0:+#;-#;+0}}" Style="{StaticResource BonusValueTxtStyle}" HorizontalAlignment="Center"/>
                                <Rectangle x:Name="SourceImage" Visibility="Hidden" Width="{StaticResource BoostIconWidth}" Height="{StaticResource BoostIconHeight}" Stretch="Uniform" Margin="0,0,0,20"/>

                                <TextBlock x:Name="label"  VerticalAlignment="Bottom" Style="{StaticResource BonusNameTxtStyle}" >
                                    <TextBlock.Text>
                                        <MultiBinding StringFormat="{}{0} {1}">
                                            <Binding Path="Name"/>
                                            <Binding Path="AdditionalValue"/>
                                        </MultiBinding>
                                    </TextBlock.Text>
                                </TextBlock>

                                <b:Interaction.Triggers>
                                    <b:DataTrigger Binding="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType=ls:LSListBoxItem}}" Value="BlinkHl">
                                        <b:InvokeCommandAction Command="{Binding DataContext.PlaySoundEventOnElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                            <b:InvokeCommandAction.CommandParameter>
                                                <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                                    <Binding Mode="OneWay" ElementName="img" />
                                                    <Binding Source="UI_HUD_DiceRoll_Bonus_Appear"/>
                                                </MultiBinding>
                                            </b:InvokeCommandAction.CommandParameter>
                                        </b:InvokeCommandAction>
                                        <b:InvokeCommandAction Command="{Binding DataContext.PlaySoundEventOnElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                            <b:InvokeCommandAction.CommandParameter>
                                                <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                                    <Binding Mode="OneWay" ElementName="img" />
                                                    <Binding Path="Tag" ElementName="img"/>
                                                </MultiBinding>
                                            </b:InvokeCommandAction.CommandParameter>
                                        </b:InvokeCommandAction>
                                    </b:DataTrigger>
                                </b:Interaction.Triggers>
                            </Grid>
                        </ContentControl>
                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{Binding BoostType}" Value="RollBonus">
                                <Setter TargetName="SourceImage" Property="Visibility" Value="Visible" />
                                <Setter TargetName="SourceImage" Property="Fill" Value="{Binding SourceVM.Icon}" />
                                <Setter TargetName="die" Property="Visibility" Value="{Binding SourceVM.Icon, Converter={StaticResource NullToVisibleConverter}}" />
                            </DataTrigger>

                            <DataTrigger Binding="{Binding BoostType}" Value="Ability">
                                <Setter TargetName="img" Property="Visibility" Value="Visible" />
                                <Setter TargetName="img" Property="Style" Value="{StaticResource AbilityIconStatStyle}" />
                                <Setter TargetName="img" Property="Tag" Value="UI_HUD_DiceRoll_BonusType_Ability" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding SourceType}" Value="Item">
                                <Setter TargetName="img" Property="Tag" Value="UI_HUD_DiceRoll_BonusType_Equipment" />
                                <Setter TargetName="SourceImage" Property="Visibility" Value="Visible" />
                                <Setter TargetName="SourceImage" Property="Fill" Value="{Binding SourceVM.Icon}" />
                                <Setter TargetName="die" Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding SourceType}" Value="Status">
                                <Setter TargetName="img" Property="Tag" Value="UI_HUD_DiceRoll_BonusType_Status" />
                                <Setter TargetName="SourceImage" Property="Visibility" Value="Visible" />
                                <Setter TargetName="SourceImage" Property="Fill" Value="{Binding SourceVM.Icon}" />
                                <Setter TargetName="die" Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding SourceType}" Value="Passive">
                                <Setter TargetName="img" Property="Tag" Value="UI_HUD_DiceRoll_BonusType_Feature" />
                            </DataTrigger>

                            <DataTrigger Binding="{Binding AdditionalValue}" Value="0">
                                <Setter TargetName="label" Property="Text" Value="{Binding Name}" />
                            </DataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding BoostType}" Value="RollBonus"/>
                                    <Condition Binding="{Binding DiceTypeSet.Amount, Converter={StaticResource GreaterThanConverter}, ConverterParameter='0'}" Value="True"/>
                                </MultiDataTrigger.Conditions>
                                <Setter TargetName="value" Property="Text" Value="{Binding Path=DiceTypeSet.Str, StringFormat='{}+{0}'}" />
                            </MultiDataTrigger>

                            <DataTrigger Binding="{Binding BoostType}" Value="ProficiencyBonus">
                                <Setter TargetName="label" Property="Text" >
                                    <Setter.Value>
                                        <MultiBinding StringFormat="{}{0} {1}">
                                            <Binding Path="Name"/>
                                            <Binding Source="h613ff7ddg32f4g43cagabd9g158fd1d7a4ec" Converter="{StaticResource TranslatedStringConverter}"/>
                                        </MultiBinding>
                                    </Setter.Value>
                                </Setter>

                                <Setter TargetName="img" Property="Visibility" Value="Visible" />
                                <Setter TargetName="img" Property="Source" Value="pack://application:,,,/Core;component/Assets/AbilityIcons/Proficiency.png" />
                            </DataTrigger>

                            <DataTrigger Binding="{Binding BoostType}" Value="ExpertiseBonus">
                                <Setter TargetName="label" Property="Text" >
                                    <Setter.Value>
                                        <MultiBinding StringFormat="{}{0} {1}">
                                            <Binding Path="Name"/>
                                            <Binding Source="h62318286g57b2g4dfeg9ecag827942dd85f7" Converter="{StaticResource TranslatedStringConverter}"/>
                                        </MultiBinding>
                                    </Setter.Value>
                                </Setter>

                                <Setter TargetName="img" Property="Visibility" Value="Visible" />
                                <Setter TargetName="img" Property="Source" Value="pack://application:,,,/Core;component/Assets/AbilityIcons/expertise.png" />
                            </DataTrigger>

                        </DataTemplate.Triggers>
                    </DataTemplate>
                </ResourceDictionary>
            </ControlTemplate.Resources>
            <Grid Background="{StaticResource LS_PopUpBackgroundColor}" ls:AttachedProperties.InheritedCharacter="{Binding CurrentPlayer.SelectedCharacter}" ls:TooltipExtender.Owner="{Binding CurrentPlayer.SelectedCharacter}">
                <Grid.Resources>
                    <Style x:Key="TargetScoreGridStyle" TargetType="Grid">
                        <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
                        <Setter Property="VerticalAlignment" Value="Top"/>
                        <Setter Property="HorizontalAlignment" Value="Center"/>
                        <Setter Property="Background" Value="Transparent"/>
                        <Setter Property="Width" Value="320"/>
                        <Setter Property="Height" Value="200"/>
                        <Setter Property="Margin" Value="0,0,0,0"/>
                    </Style>

                    <!--MiniPlayerPortraits Representation -->
                    <Style x:Key="ActiveRoll.PlayerPortraits" TargetType="ContentPresenter" >
                        <Setter Property="ContentTemplate">
                            <Setter.Value>
                                <DataTemplate DataType="ls:Character">
                                    <Grid >
                                        <ls:LSNineSliceImage x:Name="PlayerHolder" ImageSource="pack://application:,,,/Core;component/Assets/ActiveRoll/bonusDeckPortriatBracket.png" Slices="44,0,44,0" Margin="10,0,10,0" IconWidth="140" Height="100" VerticalAlignment="Bottom" MinWidth="240">
                                            <Ellipse Fill="{Binding Owner.Icon}" HorizontalAlignment="Center" VerticalAlignment="Center" Width="64" Height="64"/>
                                        </ls:LSNineSliceImage>
                                        <ls:LSListBox x:Name="boostmodlist" ItemsSource="{Binding BoostModifierList}" HorizontalAlignment="Center" VerticalAlignment="Top" ScrollViewer.CanContentScroll="False" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Hidden">
                                            <ls:LSListBox.ItemContainerStyle>
                                                <Style TargetType="ls:LSListBoxItem" >
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                    <Setter Property="Background" Value="{x:Null}"/>
                                                    <Setter Property="Template" Value="{StaticResource InactiveModifierTemplate}" />
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding IsSelected}" Value="True">
                                                            <Setter Property="Visibility" Value="Collapsed"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </ls:LSListBox.ItemContainerStyle>
                                            <ls:LSListBox.ItemsPanel>
                                                <ItemsPanelTemplate>
                                                    <StackPanel Orientation="Horizontal"/>
                                                </ItemsPanelTemplate>
                                            </ls:LSListBox.ItemsPanel>
                                            <ls:LSListBox.Template>
                                                <ControlTemplate TargetType="{x:Type ListBox}">
                                                    <ItemsPresenter />
                                                </ControlTemplate>
                                            </ls:LSListBox.Template>
                                        </ls:LSListBox>
                                    </Grid>
                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=boostmodlist, Path=ActualWidth}" Value="0" >
                                            <Setter Property="Visibility" Value="Collapsed" TargetName="PlayerHolder"/>
                                        </DataTrigger>

                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Value="False">
                                                    <Condition.Binding>
                                                        <MultiBinding Converter="{StaticResource EqualConverter}">
                                                            <Binding Path="DataContext.Owner.PlayerCharacterProperties.OwnerUserID" RelativeSource="{RelativeSource Mode=Self}"/>
                                                            <Binding Path="DataContext.CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.OwnerUserID" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                                        </MultiBinding>
                                                    </Condition.Binding>
                                                </Condition>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="IsEnabled" Value="False"/>
                                            <Setter Property="Opacity" Value="0.75"/>
                                        </MultiDataTrigger>

                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="Visibility" Value="Visible"/>
                    </Style>

                </Grid.Resources>
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="MouseLeftButtonDown" >
                        <b:InvokeCommandAction IsEnabled="{Binding Path=IsEnabled, ElementName=UserTrigger}" Command="{Binding UserTriggeredNextPhaseCommand}" CommandParameter="{StaticResource FalseValue}"/>
                    </b:EventTrigger>

                    <b:DataTrigger Binding="{Binding RollState}" Value="IntroductionAnimation">
                        <b:ChangePropertyAction TargetName="ActiveRoll" PropertyName="Tag" Value="" />
                        <b:ChangePropertyAction TargetName="AnimTargetPlaceHolder" PropertyName="Tag" Value="0" />
                        <b:ChangePropertyAction TargetName="FailButtons" PropertyName="Visibility" Value="Collapsed" />
                        <b:ControlStoryboardAction ControlStoryboardOption="Stop" Storyboard="{StaticResource toplist.FadeOut}" />
                        <b:ControlStoryboardAction ControlStoryboardOption="Stop" Storyboard="{StaticResource FailButtonAnimation}" />
                        <b:ControlStoryboardAction ControlStoryboardOption="Stop" Storyboard="{StaticResource BonussesTitle.FadeOut}" />
                    </b:DataTrigger>

                    <b:DataTrigger Binding="{Binding RollState}" Value="StartRoll">
                        <b:InvokeCommandAction Command="{Binding CustomEvent}" CommandParameter="CloseSelectionFlyOut"/>
                    </b:DataTrigger>

                    <b:PropertyChangedTrigger Binding="{Binding CurrentPlayer.SelectedCharacter}">
                        <b:InvokeCommandAction Command="{Binding UpdateCanRespondTo}"/>
                    </b:PropertyChangedTrigger>

                    <!--SOUND TRIGGERS FOR RESULT-->
                    <b:DataTrigger Binding="{Binding RollState}" Value="ResultReady" >
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding Success}" Operator="Equal" RightOperand="True"/>
                                    <b:ComparisonCondition LeftOperand="{Binding SkippedRoll}" Operator="Equal" RightOperand="False"/>
                                    <b:ComparisonCondition LeftOperand="{Binding FinalResult}" Operator="NotEqual" RightOperand="20"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <ls:LSPlaySound Sound="UI_HUD_DiceRoll_Result_Success"/>
                    </b:DataTrigger>

                    <b:DataTrigger Binding="{Binding RollState}" Value="ResultReady" >
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding Success}" Operator="Equal" RightOperand="True"/>
                                    <b:ComparisonCondition LeftOperand="{Binding SkippedRoll}" Operator="Equal" RightOperand="False"/>
                                    <b:ComparisonCondition LeftOperand="{Binding FinalResult}" Operator="Equal" RightOperand="20"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <ls:LSPlaySound Sound="UI_HUD_DiceRoll_Result_20"/>
                    </b:DataTrigger>

                    <b:DataTrigger Binding="{Binding RollState}" Value="ResultReady" >
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding Success}" Operator="Equal" RightOperand="False"/>
                                    <b:ComparisonCondition LeftOperand="{Binding SkippedRoll}" Operator="Equal" RightOperand="False"/>
                                    <b:ComparisonCondition LeftOperand="{Binding FinalResult}" Operator="NotEqual" RightOperand="1"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <ls:LSPlaySound Sound="UI_HUD_DiceRoll_Result_Fail"/>
                    </b:DataTrigger>



                    <b:DataTrigger Binding="{Binding RollState}" Value="ResultReady" >
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding Success}" Operator="Equal" RightOperand="False"/>
                                    <b:ComparisonCondition LeftOperand="{Binding SkippedRoll}" Operator="Equal" RightOperand="False"/>
                                    <b:ComparisonCondition LeftOperand="{Binding FinalResult}" Operator="Equal" RightOperand="1"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <ls:LSPlaySound Sound="UI_HUD_DiceRoll_Result_1"/>
                    </b:DataTrigger>

                    <!--SKIPPED-->
                    <b:DataTrigger Binding="{Binding RollState}" Value="ResultReady" >
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding Success}" Operator="Equal" RightOperand="True"/>
                                    <b:ComparisonCondition LeftOperand="{Binding SkippedRoll}" Operator="Equal" RightOperand="True"/>
                                    <b:ComparisonCondition LeftOperand="{Binding FinalResult}" Operator="NotEqual" RightOperand="20"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <ls:LSPlaySound Sound="UI_HUD_DiceRoll_Result_Success_Skipped"/>
                    </b:DataTrigger>

                    <b:DataTrigger Binding="{Binding RollState}" Value="ResultReady" >
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding Success}" Operator="Equal" RightOperand="True"/>
                                    <b:ComparisonCondition LeftOperand="{Binding SkippedRoll}" Operator="Equal" RightOperand="True"/>
                                    <b:ComparisonCondition LeftOperand="{Binding FinalResult}" Operator="Equal" RightOperand="20"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <ls:LSPlaySound Sound="UI_HUD_DiceRoll_Result_20_Skipped"/>
                    </b:DataTrigger>

                    <b:DataTrigger Binding="{Binding RollState}" Value="ResultReady" >
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding Success}" Operator="Equal" RightOperand="False"/>
                                    <b:ComparisonCondition LeftOperand="{Binding SkippedRoll}" Operator="Equal" RightOperand="True"/>
                                    <b:ComparisonCondition LeftOperand="{Binding FinalResult}" Operator="NotEqual" RightOperand="1"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <ls:LSPlaySound Sound="UI_HUD_DiceRoll_Result_Fail_Skipped"/>
                    </b:DataTrigger>

                    <b:DataTrigger Binding="{Binding RollState}" Value="ResultReady" >
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding Success}" Operator="Equal" RightOperand="False"/>
                                    <b:ComparisonCondition LeftOperand="{Binding SkippedRoll}" Operator="Equal" RightOperand="True"/>
                                    <b:ComparisonCondition LeftOperand="{Binding FinalResult}" Operator="Equal" RightOperand="1"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <ls:LSPlaySound Sound="UI_HUD_DiceRoll_Result_1_Skipped"/>
                    </b:DataTrigger>
                </b:Interaction.Triggers>

                <ls:LSButton x:Name="CloseButton" Margin="0,20,20,0" Command="{Binding CancelCommand}" HorizontalAlignment="Right" VerticalAlignment="Top" SoundID="UI_HUD_Panel_Close">
                    <ls:LSButton.Style>
                        <Style TargetType="{x:Type ls:LSButton}" BasedOn="{StaticResource CloseButton}">
                            <Style.Setters>
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </Style.Setters>
                        </Style>
                    </ls:LSButton.Style>
                </ls:LSButton>

                <StackPanel x:Name="headerSection" VerticalAlignment="Top" HorizontalAlignment="Center" Margin="0,120,0,0">
                    <TextBlock Style="{StaticResource ActiveRollTextBlock}" Foreground="{StaticResource Dialogue.Answer.Normal}" ls:TextBlockFormatter.SourceText="{Binding SelectedDialogueLine}" FontSize="{StaticResource ScaledTitleFontSize}" Visibility="{Binding SelectedDialogueLine, Converter={StaticResource NullToHiddenConverter}, ConverterParameter='EmptyString'}" />
                    <Image Source="{StaticResource DialogueSeparatorImage}" Stretch="None" HorizontalAlignment="Center" Visibility="{Binding SelectedDialogueLine, Converter={StaticResource NullToHiddenConverter}, ConverterParameter='EmptyString'}" Margin="0,20,0,40"/>

                    <TextBlock Style="{StaticResource ActiveRollTextBlock}" Text="{Binding SkillOrAbility}" FontSize="{StaticResource ScaledMassiveFontSize}"  />
                    <TextBlock Text="{Binding AbilityCheckText}" FontSize="{StaticResource ScaledDefaultFontSize}" Style="{StaticResource ActiveRollTextBlock}"  Foreground="{StaticResource LS_accent75TxtColor}" Visibility="{Binding IsPureAbilityRoll, Converter={StaticResource BoolToHiddenConverter}}"/>
                </StackPanel>

                <!-- Skip on Click-->
                <ls:LSInputBinding x:Name="UserTrigger" IsEnabled="True" PlayerId="{Binding DataContext.CurrentPlayer.PlayerId, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" BoundEvent="UIAccept" Command="{Binding UserTriggeredNextPhaseCommand}" Visibility="Collapsed" CommandParameter="{StaticResource TrueValue}" >
                    <b:Interaction.Triggers>
                        <b:PropertyChangedTrigger Binding="{Binding Path=DataContext.RollState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}">
                            <b:ControlStoryboardAction ControlStoryboardOption="Play">
                                <b:ControlStoryboardAction.Storyboard>
                                    <Storyboard FillBehavior="Stop" Duration="0:0:0.2">
                                        <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.IsEnabled)" Storyboard.TargetName="UserTrigger">
                                            <DiscreteBooleanKeyFrame KeyTime="0" Value="False"/>
                                        </BooleanAnimationUsingKeyFrames>
                                    </Storyboard>
                                </b:ControlStoryboardAction.Storyboard>
                            </b:ControlStoryboardAction>
                        </b:PropertyChangedTrigger>
                    </b:Interaction.Triggers>
                </ls:LSInputBinding>
                
                <!-- Skip on Escape-->
                <ls:LSInputBinding x:Name="UserTriggerEsc" IsEnabled="False" PlayerId="{Binding DataContext.CurrentPlayer.PlayerId, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" BoundEvent="ToggleInGameMenu" Command="{Binding UserTriggeredNextPhaseCommand}" Visibility="Collapsed" CommandParameter="{StaticResource TrueValue}" />

                <Image Source="/Core;component/Assets/ActiveRoll/ActiveRollFrame.png" Margin="0,460,0,0" VerticalAlignment="Top" Stretch="None"/>
                <Image Source="/Core;component/Assets/ActiveRoll/FrameJoin.png" Margin="0,744,268,0" VerticalAlignment="Top" Stretch="None"/>
                <Image Source="/Core;component/Assets/ActiveRoll/FrameJoin.png" Margin="268,744,0,0" VerticalAlignment="Top" Stretch="None"/>

                <Control Template="{StaticResource LockTemplate}" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,760,0,0" IsHitTestVisible="False"/>

                <Grid x:Name="BonusModifiers" HorizontalAlignment="Center" VerticalAlignment="Bottom" >
                    <Grid.Resources>
                        <Style x:Key="BonusTitleStyle" TargetType="TextBlock">
                            <Setter Property="noesis:Text.Stroke" Value="{StaticResource LS_tint00}"/>
                            <Setter Property="noesis:Text.StrokeThickness" Value="6"/>
                            <Setter Property="TextAlignment" Value="Center"/>
                            <Setter Property="FontSize" Value="{StaticResource MediumFontSize}"/>
                            <Setter Property="Foreground" Value="{StaticResource LS_baseTxtColor}"/>
                        </Style>
                    </Grid.Resources>
                    <Grid HorizontalAlignment="Center" VerticalAlignment="Bottom" Height="932" >

                        <Grid x:Name="BonussesTitle"  Margin="0,340,0,0" VerticalAlignment="Top" HorizontalAlignment="Center">
                            <Image Source="pack://application:,,,/Core;component/Assets/ActiveRoll/totalBonusFrameElement.png" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,0,0,0"/>
                            <Image Source="pack://application:,,,/Core;component/Assets/ActiveRoll/totalBonusFrameElement.png" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,0,0,0">
                                <Image.RenderTransform>
                                    <ScaleTransform ScaleY="-1"/>
                                </Image.RenderTransform>
                            </Image>
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0,45,0,80">
                                <StackPanel.Resources>
                                    <Style TargetType="TextBlock" BasedOn="{StaticResource ActiveRollTextBlock}" >
                                        <Setter Property="FontSize" Value="{StaticResource DefaultFontSize}"/>
                                    </Style>
                                </StackPanel.Resources>
                                <TextBlock Text="{Binding Source=ha87d5467gfc76g42b7g82aega958176e3494 , Converter={StaticResource TranslatedStringConverter}}" VerticalAlignment="Center"/>
                                <Control Template="{StaticResource MinMaxText}" VerticalAlignment="Center" Margin="20,0,0,0" FontSize="{StaticResource DefaultFontSize}" Background="Transparent" Foreground="{StaticResource LS_extraspecialTxtColor}" noesis:Text.Stroke="{StaticResource LS_tint00}" noesis:Text.StrokeThickness="6"/>

                            </StackPanel>
                        </Grid>


                        <Grid x:Name="TopNavigationList" Opacity="1" VerticalAlignment="Top" MinHeight="360" Margin="0,44,0,0">

                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" >
                                <StackPanel.Resources>

                                    <Style x:Key="ModifierElementStyle" TargetType="ls:LSListBoxItem" >
                                        <Setter Property="Background" Value="{x:Null}"/>
                                        <Setter Property="IsEnabled" Value="True" />
                                        <Setter Property="Template" Value="{StaticResource ModifierTemplate}" />
                                        <Style.Triggers>
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter Property="Opacity" Value="{StaticResource DisabledOpacity}"/>
                                            </Trigger>
                                            <DataTrigger Binding="{Binding DataContext.RollState,RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Value="ResultReady" >
                                                <Setter Property="IsEnabled" Value="False" />
                                            </DataTrigger>
                                        </Style.Triggers>

                                    </Style>

                                    <Style x:Key="ModifierListStyle" TargetType="ls:LSListBox" BasedOn="{StaticResource {x:Type ls:LSListBox}}">
                                        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
                                        <Setter Property="ItemsPanel">
                                            <Setter.Value>
                                                <ItemsPanelTemplate>
                                                    <VirtualizingStackPanel Orientation="Horizontal"/>
                                                </ItemsPanelTemplate>
                                            </Setter.Value>
                                        </Setter>
                                        <Setter Property="ItemContainerStyle" Value="{StaticResource ModifierElementStyle}"/>
                                    </Style>

                                </StackPanel.Resources>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <b:ChangePropertyAction TargetName="RollModSeq" PropertyName="Animate" Value="True"/>
                                    </b:EventTrigger>
                                    <b:DataTrigger Binding="{Binding ElementName=RollModSeq ,Path=SequenceCompleted}" Value="True">
                                        <b:ChangePropertyAction TargetName="RollAdvSeq" PropertyName="Animate" Value="True"/>
                                    </b:DataTrigger>

                                </b:Interaction.Triggers>



                                <Grid x:Name="ToolsHolder" Width="224" Visibility="Collapsed" Opacity="{StaticResource DisabledOpacity}">
                                    <b:Interaction.Triggers>
                                        <b:EventTrigger EventName="MouseEnter">
                                            <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                                        </b:EventTrigger>

                                        <b:EventTrigger EventName="MouseLeftButtonDown">
                                            <ls:LSPlaySound Sound="UI_HUD_DiceRoll_Bonus_Press" />
                                        </b:EventTrigger>

                                        <b:EventTrigger EventName="MouseLeftButtonUp">
                                            <ls:LSPlaySound Sound="UI_Shared_Click" />
                                        </b:EventTrigger>
                                    </b:Interaction.Triggers>

                                    <Image x:Name="ToolsHolderBG" Source="{StaticResource ItemModifierBucketImage}" Stretch="None" VerticalAlignment="Top" Margin="-18,0,-18,0"/>
                                    <Grid Height="{StaticResource BoostContentHeight}" ls:TooltipExtender.Owner="{Binding (ls:TooltipExtender.Owner), ElementName=ToolsHolder}" DataContext="{Binding ContextObject}" Width="{StaticResource BoostContentWidth}" Background="Transparent" ToolTipService.ShowOnDisabled="True" ToolTipService.Placement="Right" VerticalAlignment="Top" Margin="0,30,0,0">
                                        <Grid.ToolTip>
                                            <ls:LSTooltip Content="{Binding DataContext.ContextObject, ElementName=ToolsHolder}" ls:TooltipExtender.Owner="{Binding (ls:TooltipExtender.Owner), ElementName=ToolsHolder}"/>
                                        </Grid.ToolTip>
                                        <TextBlock Text="{Binding Source=ha83f58cbg59d7g495cga578g0e945f86c83f , Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Center" VerticalAlignment="Top" Style="{StaticResource BonusValueTxtStyle}"/>

                                        <Image Source="{StaticResource ItemSlotImage}" Stretch="None" Margin="0,0,0,20"/>
                                        <ls:LSEntityObject Context="Inventory" EntityRef="{Binding EntityHandle}" VerticalAlignment="Center" Margin="0,0,0,20" ContextMenuService.IsEnabled="False" Background="Transparent" ToolTip="{Binding }" IsHitTestVisible="False">
                                            <ContentPresenter Content="{Binding}" Style="{StaticResource Style.GameObject}" IsHitTestVisible="False"/>
                                        </ls:LSEntityObject>

                                        <TextBlock x:Name="label" Tag="UI_HUD_DiceRoll_BonusType_Default" Text="{Binding Name}" VerticalAlignment="Bottom" Style="{StaticResource BonusNameTxtStyle}" />
                                    </Grid>
                                </Grid>

                                <StackPanel Orientation="Horizontal" x:Name="ActiveRollBoosts">
                                    <ls:LSListBox x:Name="modlist" ItemsSource="{Binding Roll.Modifiers}" Style="{StaticResource ModifierListStyle}" >
                                        <b:Interaction.Behaviors>
                                            <ls:SequenceBehavior x:Name="RollModSeq" TimeOffset="0:0:0.2" CompletedDelay="0:0:0.2" />
                                        </b:Interaction.Behaviors>
                                    </ls:LSListBox>
                                    <ls:LSListBox ItemsSource="{Binding Roll.Advantages}" Style="{StaticResource ModifierListStyle}">
                                        <ls:LSListBox.ItemContainerStyle>
                                            <Style BasedOn="{StaticResource ModifierElementStyle}" TargetType="ls:LSListBoxItem" >
                                                <Setter Property="IsEnabled" Value="False" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding DataContext.RollState,RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Value="WaitForStart" >
                                                        <Setter Property="IsEnabled" Value="True" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding DataContext.RollState,RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Value="WaitForReRoll" >
                                                        <Setter Property="IsEnabled" Value="True" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding DataContext.RollState,RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Value="IntroductionAnimation" >
                                                        <Setter Property="IsEnabled" Value="True" />
                                                    </DataTrigger>
                                                </Style.Triggers>

                                            </Style>
                                        </ls:LSListBox.ItemContainerStyle>
                                        <b:Interaction.Behaviors>
                                            <ls:SequenceBehavior x:Name="RollAdvSeq" TimeOffset="0:0:0.2" CompletedDelay="0:0:0.2" />
                                        </b:Interaction.Behaviors>
                                    </ls:LSListBox>

                                </StackPanel>


                                <Grid x:Name="divider" VerticalAlignment="Top" Margin="-0,-2,-0,0" >
                                    <Image Source="pack://application:,,,/Core;component/Assets/ActiveRoll/modifierDivider_active.png" Stretch="None" />
                                    <Grid.Style>
                                        <Style TargetType="Grid">
                                            <Setter Property="Visibility" Value="Visible"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding SelectedBoostModifierList.Count}" Value="0">
                                                    <Setter Property="Visibility" Value="Collapsed"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding ElementName=ActiveRollBoosts, Path=ActualWidth}" Value="0">
                                                    <Setter Property="Visibility" Value="Collapsed"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Grid.Style>
                                </Grid>

                                <ls:LSListBox x:Name="selectedboostmodlist" ItemsSource="{Binding SelectedBoostModifierList}" HorizontalAlignment="Center" VerticalAlignment="Top" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Disabled" Style="{StaticResource ModifierListStyle}">

                                    <ls:LSListBox.ItemContainerStyle>
                                        <Style TargetType="ls:LSListBoxItem" >
                                            <Setter Property="Background" Value="Transparent"/>
                                            <Setter Property="Template" >
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="ls:LSListBoxItem">
                                                        <Grid x:Name="root">
                                                            <Grid.RenderTransform>
                                                                <TransformGroup>
                                                                    <ScaleTransform/>
                                                                    <SkewTransform/>
                                                                    <RotateTransform/>
                                                                    <TranslateTransform />
                                                                </TransformGroup>
                                                            </Grid.RenderTransform>
                                                            <b:Interaction.Triggers>
                                                                <b:EventTrigger EventName="MouseEnter">
                                                                    <ls:LSPlaySound Sound="UI_Shared_Hover" />
                                                                </b:EventTrigger>

                                                                <b:EventTrigger EventName="MouseLeftButtonDown">
                                                                    <ls:LSPlaySound Sound="UI_HUD_DiceRoll_Bonus_Press" />
                                                                </b:EventTrigger>

                                                                <b:EventTrigger EventName="MouseLeftButtonUp">
                                                                    <ls:LSPlaySound Sound="UI_Shared_Click" />
                                                                </b:EventTrigger>

                                                                <!-- When a selected boost is loaded, play a sound for if the boost adds/removes advantage or adds disadvantage -->
                                                                <!-- NOTE: RollAdvantageType = the dice's advantage type WITH this bonus already applied and AdvantageType is this Bonus's advantage type -->
                                                                <!-- Case Advantage + Disadvantage bonus, it gives a Flat roll (final advantage type will be None), play BonusRemoves_Advantage (very rare) -->
                                                                <b:EventTrigger EventName="Loaded">
                                                                    <b:Interaction.Behaviors>
                                                                        <b:ConditionBehavior>
                                                                            <b:ConditionalExpression>
                                                                                <b:ComparisonCondition LeftOperand="{Binding Path=DataContext.Roll.RollAdvantageType, RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Operator="Equal" RightOperand="None" />
                                                                                <b:ComparisonCondition LeftOperand="{Binding AdvantageType}" Operator="Equal" RightOperand="Disadvantage" />
                                                                            </b:ConditionalExpression>
                                                                        </b:ConditionBehavior>
                                                                    </b:Interaction.Behaviors>
                                                                    <ls:LSPlaySound Sound="UI_HUD_DiceRoll_BonusRemoves_Advantage" />
                                                                </b:EventTrigger>

                                                                <!-- Case Disadvantage + Advantage bonus, it gives a Flat roll (final advantage type will be None), play BonusRemoves_Disadvantage (somewhat common) -->
                                                                <b:EventTrigger EventName="Loaded">
                                                                    <b:Interaction.Behaviors>
                                                                        <b:ConditionBehavior>
                                                                            <b:ConditionalExpression>
                                                                                <b:ComparisonCondition LeftOperand="{Binding Path=DataContext.Roll.RollAdvantageType, RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Operator="Equal" RightOperand="None" />
                                                                                <b:ComparisonCondition LeftOperand="{Binding AdvantageType}" Operator="Equal" RightOperand="Advantage" />
                                                                            </b:ConditionalExpression>
                                                                        </b:ConditionBehavior>
                                                                    </b:Interaction.Behaviors>
                                                                    <ls:LSPlaySound Sound="UI_HUD_DiceRoll_BonusRemoves_Disadvantage" />
                                                                </b:EventTrigger>

                                                                <!-- Case flat roll + Advantage bonus, it gives an Advantage roll (final advantage type will be Advantage), play BonusAdds_Advantage (somewhat common) -->
                                                                <b:EventTrigger EventName="Loaded">
                                                                    <b:Interaction.Behaviors>
                                                                        <b:ConditionBehavior>
                                                                            <b:ConditionalExpression>
                                                                                <b:ComparisonCondition LeftOperand="{Binding Path=DataContext.Roll.RollAdvantageType, RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Operator="Equal" RightOperand="Advantage" />
                                                                                <b:ComparisonCondition LeftOperand="{Binding AdvantageType}" Operator="Equal" RightOperand="Advantage" />
                                                                            </b:ConditionalExpression>
                                                                        </b:ConditionBehavior>
                                                                    </b:Interaction.Behaviors>
                                                                    <ls:LSPlaySound Sound="UI_HUD_DiceRoll_BonusAdds_Advantage" />
                                                                </b:EventTrigger>

                                                                <!--  Case flat roll + Disadvantage bonus, it gives an Disadvantage roll (final advantage type will be Disadvantage), play BonusAdds_Disadvantage (very rare) -->
                                                                <b:EventTrigger EventName="Loaded">
                                                                    <b:Interaction.Behaviors>
                                                                        <b:ConditionBehavior>
                                                                            <b:ConditionalExpression>
                                                                                <b:ComparisonCondition LeftOperand="{Binding Path=DataContext.Roll.RollAdvantageType, RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Operator="Equal" RightOperand="Disadvantage" />
                                                                                <b:ComparisonCondition LeftOperand="{Binding AdvantageType}" Operator="Equal" RightOperand="Disadvantage" />
                                                                            </b:ConditionalExpression>
                                                                        </b:ConditionBehavior>
                                                                    </b:Interaction.Behaviors>
                                                                    <ls:LSPlaySound Sound="UI_HUD_DiceRoll_BonusAdds_Disadvantage" />
                                                                </b:EventTrigger>

                                                                <b:EventTrigger EventName="MouseDown">
                                                                    <b:Interaction.Behaviors>
                                                                        <b:ConditionBehavior>
                                                                            <b:ConditionalExpression>
                                                                                <b:ComparisonCondition LeftOperand="{Binding DataContext.CanRespondToCommands,RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Operator="Equal" RightOperand="True"/>
                                                                            </b:ConditionalExpression>
                                                                        </b:ConditionBehavior>
                                                                    </b:Interaction.Behaviors>
                                                                    <b:InvokeCommandAction Command="{Binding DataContext.RemoveModifierCommand, RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" CommandParameter="{Binding}"/>
                                                                </b:EventTrigger>

                                                                <b:EventTrigger EventName="MouseDown">
                                                                    <b:Interaction.Behaviors>
                                                                        <b:ConditionBehavior>
                                                                            <b:ConditionalExpression>
                                                                                <b:ComparisonCondition LeftOperand="{Binding Owner.PlayerCharacterProperties.OwnerUserID}" Operator="Equal"
                                                                                    RightOperand="{Binding DataContext.CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.OwnerUserID, RelativeSource={RelativeSource AncestorType=ls:UIWidget}}"/>
                                                                            </b:ConditionalExpression>
                                                                        </b:ConditionBehavior>
                                                                    </b:Interaction.Behaviors>
                                                                    <b:InvokeCommandAction Command="{Binding DataContext.RemoveModifierCommand, RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" CommandParameter="{Binding}"/>
                                                                </b:EventTrigger>

                                                                <b:DataTrigger Binding="{Binding Path=(ls:SequenceBehavior.PlayElement), RelativeSource={RelativeSource AncestorType=ls:LSListBoxItem}}" Value="True">
                                                                    <b:ControlStoryboardAction ControlStoryboardOption="Play">
                                                                        <b:ControlStoryboardAction.Storyboard>
                                                                            <Storyboard Children="{StaticResource SlideInModAnim}"/>
                                                                        </b:ControlStoryboardAction.Storyboard>
                                                                    </b:ControlStoryboardAction>
                                                                </b:DataTrigger>
                                                            </b:Interaction.Triggers>
                                                            <Image x:Name="bgImg" Source="pack://application:,,,/Core;component/Assets/ActiveRoll/activeModifierBucket_d.png" Stretch="None" VerticalAlignment="Top" Margin="-18,0,-18,0"/>
                                                            <ls:LSButton HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,-4,-20,0" Command="{Binding DataContext.RemoveModifierCommand, RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" CommandParameter="{Binding}">
                                                                <ls:LSButton.Style>
                                                                    <Style TargetType="ls:LSButton">
                                                                        <Setter Property="Template" >
                                                                            <Setter.Value>
                                                                                <ControlTemplate TargetType="ls:LSButton">
                                                                                    <ControlTemplate.Resources>
                                                                                        <ImageSource x:Key="IconNormal">pack://application:,,,/Core;component/Assets/Buttons/box_btn_ico_less.png</ImageSource>
                                                                                    </ControlTemplate.Resources>
                                                                                    <Grid>
                                                                                        <Image x:Name="img" Source="{StaticResource BtnSmallRound}" Stretch="None"/>
                                                                                        <Image x:Name="icon" Margin="0,0,0,0" Source="{StaticResource IconNormal}" Stretch="None"/>
                                                                                    </Grid>
                                                                                    <ControlTemplate.Triggers>
                                                                                        <Trigger Property="IsMouseOver" Value="True">
                                                                                            <Setter Property="Source" Value="pack://application:,,,/Core;component/Assets/Buttons/btn_small_round_h.png" TargetName="img"/>
                                                                                            <Setter Property="Source" Value="pack://application:,,,/Core;component/Assets/Buttons/box_btn_ico_less.png" TargetName="icon"/>
                                                                                        </Trigger>
                                                                                        <Trigger Property="IsPressed" Value="True">
                                                                                            <Setter Property="Source" Value="pack://application:,,,/Core;component/Assets/Buttons/btn_small_round_p.png" TargetName="img"/>
                                                                                            <Setter Property="Margin" Value="0,4,0,0" TargetName="icon"/>
                                                                                        </Trigger>
                                                                                        <Trigger Property="IsEnabled" Value="False">
                                                                                            <Setter Property="Source" Value="pack://application:,,,/Core;component/Assets/Buttons/btn_small_round_disabled.png" TargetName="img"/>
                                                                                            <Setter Property="Opacity" Value="0.7" TargetName="icon"/>
                                                                                        </Trigger>
                                                                                    </ControlTemplate.Triggers>
                                                                                </ControlTemplate>
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                        <Setter Property="IsEnabled" Value="False"/>
                                                                        <Setter Property="Visibility" Value="Collapsed"/>
                                                                        <Style.Triggers>
                                                                            <MultiDataTrigger>
                                                                                <MultiDataTrigger.Conditions>
                                                                                    <Condition  Value="True">
                                                                                        <Condition.Binding>
                                                                                            <MultiBinding Converter="{StaticResource EqualConverter}">
                                                                                                <Binding Path="DataContext.Owner.OwnerUserID" RelativeSource="{RelativeSource Mode=Self}"/>
                                                                                                <Binding Path="DataContext.CurrentPlayer.SelectedCharacter.OwnerUserID" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                                                                            </MultiBinding>
                                                                                        </Condition.Binding>
                                                                                    </Condition>
                                                                                </MultiDataTrigger.Conditions>
                                                                                <Setter Property="IsEnabled" Value="True"/>
                                                                                <Setter Property="Visibility" Value="Visible"/>
                                                                            </MultiDataTrigger>
                                                                        </Style.Triggers>
                                                                    </Style>
                                                                </ls:LSButton.Style>
                                                            </ls:LSButton>

                                                            <Grid Margin="0,30" VerticalAlignment="Top" >
                                                                <Viewbox VerticalAlignment="Top" HorizontalAlignment="Center" Width="200" StretchDirection="DownOnly">
                                                                    <TextBlock x:Name="BonusTxt" Style="{StaticResource BonusValueTxtStyle}">
                                                                        <TextBlock.Tag>
                                                                            <MultiBinding Converter="{StaticResource EqualConverter}">
                                                                                <Binding Path="MinBonusValue"/>
                                                                                <Binding Path="MaxBonusValue"/>
                                                                            </MultiBinding>
                                                                        </TextBlock.Tag>
                                                                    </TextBlock>
                                                                </Viewbox>
                                                                <ContentPresenter Content="{Binding BoostModifier}"/>
                                                            </Grid>

                                                            <Grid VerticalAlignment="Top" HorizontalAlignment="Center" Margin="0,120,60,0">
                                                                <ls:LSEntityObject EntityRef="{Binding Owner.EntityHandle}" ToolTipService.ShowOnDisabled="True" ToolTipService.Placement="Right" Background="Transparent">
                                                                    <ls:LSEntityObject.ToolTip>
                                                                        <ls:LSTooltip Content="{Binding Path=DataContext.Owner.Name, ElementName=root}"  Placement="Top"/>
                                                                    </ls:LSEntityObject.ToolTip>
                                                                    <Ellipse Fill="{Binding Owner.Icon}" Width="50" Height="50"/>
                                                                    <Image Source="pack://application:,,,/Core;component/Assets/ActiveRoll/companionAidFrame.png" Stretch="None"/>
                                                                </ls:LSEntityObject>

                                                            </Grid>

                                                        </Grid>
                                                        <ControlTemplate.Triggers>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Value="False">
                                                                        <Condition.Binding>
                                                                            <MultiBinding Converter="{StaticResource EqualConverter}">
                                                                                <Binding Path="DataContext.Owner.PlayerCharacterProperties.OwnerUserID" RelativeSource="{RelativeSource Mode=Self}"/>
                                                                                <Binding Path="DataContext.CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.OwnerUserID" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                                                            </MultiBinding>
                                                                        </Condition.Binding>
                                                                    </Condition>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter Property="IsEnabled" Value="False"/>
                                                                <Setter Property="Opacity" Value="0.75"/>
                                                            </MultiDataTrigger>
                                                            <DataTrigger Binding="{Binding ElementName=BonusTxt, Path=Tag}" Value="True">
                                                                <Setter TargetName="BonusTxt" Property="Text" >
                                                                    <Setter.Value>
                                                                        <MultiBinding StringFormat="{}{0:+#;-#;+0}">
                                                                            <Binding Path="MinBonusValue" />
                                                                        </MultiBinding>
                                                                    </Setter.Value>
                                                                </Setter>
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding IsAdvantage}" Value="True">
                                                                <Setter TargetName="BonusTxt" Property="Text" Value="{Binding Source=he770672cgd25bg4ec8g8bb6g6745e6e7576f  , Converter={StaticResource TranslatedStringConverter}}"/>
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding DiceTypeSet.Amount,Converter={StaticResource GreaterThanConverter},ConverterParameter=0}" Value="True">
                                                                <Setter TargetName="BonusTxt" Property="Text" Value="{Binding DiceTypeSet.Str, StringFormat='{}+{0}'}"/>
                                                            </DataTrigger>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter Property="Source" Value="pack://application:,,,/Core;component/Assets/ActiveRoll/activeModifierBucket_h.png" TargetName="bgImg"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                            <Setter Property="IsEnabled" Value="True" />
                                            <Style.Triggers>
                                                <Trigger Property="IsEnabled" Value="False">
                                                    <Setter Property="Opacity" Value="{StaticResource DisabledOpacity}"/>
                                                </Trigger>
                                                <DataTrigger Binding="{Binding DataContext.RollState, RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Value="ResultReady" >
                                                    <Setter Property="IsEnabled" Value="False" />
                                                </DataTrigger>

                                                <DataTrigger Binding="{Binding IsAdvantage}" Value="True">
                                                    <Setter Property="IsEnabled" Value="False"/>
                                                </DataTrigger>

                                                <MultiDataTrigger >
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsAdvantage}" Value="True"/>
                                                        <Condition Binding="{Binding DataContext.RollState,RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Value="WaitForStart"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="IsEnabled" Value="True"/>
                                                </MultiDataTrigger>

                                                <MultiDataTrigger >
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsAdvantage}" Value="True"/>
                                                        <Condition Binding="{Binding DataContext.RollState,RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Value="WaitForReRoll"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="IsEnabled" Value="True"/>
                                                </MultiDataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ls:LSListBox.ItemContainerStyle>
                                </ls:LSListBox>

                            </StackPanel>
                        </Grid>

                    </Grid>

                    <ContentControl x:Name="ResultHolder" Margin="0,-474,0,0" HorizontalAlignment="Center" VerticalAlignment="Top" Style="{StaticResource ResultCountTemplateStyle}"  >
                        <Rectangle x:Name="AnimTargetPlaceHolder" HorizontalAlignment="Center" VerticalAlignment="Center" Width="4" Height="4"  />
                    </ContentControl>

                    <Grid x:Name="BoostContainer" VerticalAlignment="Bottom" HorizontalAlignment="Center" Visibility="Collapsed">

                        <Grid x:Name="BoostList" Visibility="Hidden" VerticalAlignment="Bottom" HorizontalAlignment="Center" Height="436" MaxWidth="3840">
                            <Grid.Resources>
                                <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource BaseScrollBar}"/>
                            </Grid.Resources>

                            <ScrollViewer VerticalAlignment="Top" Style="{StaticResource NoForcedScrollViewerStyle}" VerticalScrollBarVisibility="Disabled" HorizontalScrollBarVisibility="Auto" PanningMode="HorizontalOnly" Margin="0,-46,0,0">
                                <ItemsControl x:Name="BoostListItemsControl" ItemsSource="{Binding NearbyPartyCharacters}" ItemContainerStyle="{StaticResource ActiveRoll.PlayerPortraits}"  HorizontalAlignment="Center">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <StackPanel IsItemsHost="False" Orientation="Horizontal"/>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                </ItemsControl>
                            </ScrollViewer>

                            <ls:LSButton x:Name="CloseBoostListButton" VerticalAlignment="Top" Margin="560,-80,0,-86" Style="{StaticResource CloseButton}">
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Click" >
                                        <b:ChangePropertyAction TargetName="BoostList" PropertyName="Visibility" Value="Collapsed"/>
                                        <b:ChangePropertyAction TargetName="BoostListButtonHolder" PropertyName="Visibility" Value="Visible"/>
                                        <ls:LSPlaySound Sound="UI_HUD_DiceRoll_AddBonus_Click"/>
                                    </b:EventTrigger>
                                    <b:EventTrigger EventName="MouseDown">
                                        <ls:LSPlaySound Sound="UI_HUD_DiceRoll_AddBonus_Press"/>
                                    </b:EventTrigger>
                                    <b:EventTrigger EventName="MouseEnter">
                                        <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>
                            </ls:LSButton>
                            
                            <Border VerticalAlignment="Bottom" Height="80">
                                <TextBlock Text="{Binding Source=h6b9cbd3cga1a0g4cf0gb8a9gd13f93b33099 , Converter={StaticResource TranslatedStringConverter}}" VerticalAlignment="Center" Style="{StaticResource BonusTitleStyle}"/>
                            </Border>
                        </Grid>

                        <Grid x:Name="BoostListButtonHolder" HorizontalAlignment="Center" VerticalAlignment="Bottom" Panel.ZIndex="1" Height="436">
                            <Grid.Style>
                                <Style TargetType="Grid" >
                                    <Setter Property="Visibility" Value="Hidden"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=DataContext.HasBoostsToAdd,RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Value="True">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Grid.Style>

                            <Image Source="pack://application:,,,/Core;component/Assets/ActiveRoll/AddMoreBG.png" Stretch="None" VerticalAlignment="Top" HorizontalAlignment="Center" Margin="-16,0,0,0"/>

                            <ls:LSButton x:Name="AddBonusButton" Margin="0,50,0,0" VerticalAlignment="Top" Content="{Binding Source='h10b87da6ge266g44f0gaf03gec4ceb367dc8', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource BrownButtonTextAndIconStyle}">
                                <ls:LSButton.Resources>
                                    <ImageBrush x:Key="IconNormal" ImageSource="pack://application:,,,/Core;component/Assets/Shared/ico_addMore.png" Stretch="Fill"/>
                                    <ImageBrush x:Key="IconPressed" ImageSource="pack://application:,,,/Core;component/Assets/Shared/ico_addMore.png" Stretch="Fill"/>
                                    <ImageBrush x:Key="IconHighlight" ImageSource="pack://application:,,,/Core;component/Assets/Shared/ico_addMore.png" Stretch="Fill"/>
                                    <ImageBrush x:Key="IconDisabled" ImageSource="pack://application:,,,/Core;component/Assets/Shared/ico_addMore.png" Stretch="Fill"/>
                                </ls:LSButton.Resources>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Click" >
                                        <b:ChangePropertyAction TargetName="BoostList" PropertyName="Visibility" Value="Visible" />
                                        <b:ChangePropertyAction TargetName="BoostListButtonHolder" PropertyName="Visibility" Value="Collapsed" />
                                        <ls:LSPlaySound Sound="UI_HUD_DiceRoll_AddBonus_Click"/>
                                    </b:EventTrigger>
                                    <b:EventTrigger EventName="MouseDown">
                                        <ls:LSPlaySound Sound="UI_HUD_DiceRoll_AddBonus_Press"/>
                                    </b:EventTrigger>
                                    <b:EventTrigger EventName="MouseEnter">
                                        <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>
                            </ls:LSButton>

                        </Grid>

                        <ls:LSButton x:Name="CloseButton_2" Margin="0,0,0,88" VerticalAlignment="Bottom" HorizontalAlignment="Center" Command="{Binding CancelCommand}" SoundID="UI_HUD_Panel_Close">
                            <ls:LSButton.Style>
                                <Style TargetType="{x:Type ls:LSButton}" BasedOn="{StaticResource BrownButtonStyle}">
                                    <Style.Setters>
                                        <!-- KELA Collapsed -->
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Setter Property="Content" Value="{Binding Source='h0d98c8cbg811eg40a5g958dg2552a3f4e350', Converter={StaticResource TranslatedStringConverter}}"/>
                                    </Style.Setters>
                                </Style>
                            </ls:LSButton.Style>
                        </ls:LSButton>

                    </Grid>
                </Grid>
                <Control x:Name="ResultAnimation"  Style="{StaticResource ResultControlStyle}" IsHitTestVisible="False"/>
                <Grid x:Name="rollSection" Margin="0,0,0,322">
                    <Grid.Resources>
                        <Style x:Key="TextElementHolderStyle" TargetType="Grid" >
                            <Setter Property="Height" Value="800"/>
                            <Setter Property="Margin" Value="0,540,0,0"/>
                        </Style>

                        <Style x:Key="RollBonusStyle" TargetType="Control" >
                            <Setter Property="Margin" Value="0,0,0,140"/>
                        </Style>

                        <Style x:Key="TargetTextHolderStyle" TargetType="StackPanel" >
                            <Setter Property="Height" Value="420"/>
                            <Setter Property="Margin" Value="0,10,0,0"/>
                        </Style>

                        <Style x:Key="textBlockTargetStyle" TargetType="TextBlock" BasedOn="{StaticResource ActiveRollTextBlock}" >
                            <Setter Property="FontSize" Value="{StaticResource SmallishFontSize}"/>
                            <Setter Property="LineHeight" Value="{StaticResource SmallFontSizeLineHeight}"/>
                            <Setter Property="LineStackingStrategy" Value="BlockLineHeight"/>
                        </Style>

                        <Style x:Key="targetScoreAnimationStyle" TargetType="Grid" >
                            <Setter Property="VerticalAlignment" Value="Center"/>
                        </Style>


                        <Style x:Key="DCTextStyle" TargetType="TextBlock" BasedOn="{StaticResource DCTextStyleBase}">
                            <Setter Property="FontSize" Value="{StaticResource HumongousFontSize}"/>
                        </Style>

                        <Style x:Key="DieHolderStyle" TargetType="Grid" BasedOn="{StaticResource BaseDieHolderStyle}">
                            <Setter Property="VerticalAlignment" Value="Center"/>
                            <Setter Property="Margin" Value="0,0,0,46"/>
                        </Style>
                    </Grid.Resources>
                    <Control x:Name="DieControlHolder" Template="{StaticResource DieControlHolderTemplate}"/>

                    <Grid IsHitTestVisible="False" x:Name="prompt" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,300,0,0" >
                        <ls:LSNineSliceImage Slices="44,44,44,44" MinHeight="120" MinWidth="440" ImageSource="{StaticResource RollPromptImage}"  >
                            <TextBlock TextAlignment="Center" VerticalAlignment="Center" Foreground="{StaticResource LS_baseTxtColor}" Margin="80,4,80,4">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source=h4021a2c2gd83fg49a9g98c8g0de738d55dfd, Converter={StaticResource TranslatedStringConverter}}"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding CanRespondToCommands}" Value="False" >
                                                <Setter Property="ls:TextBlockFormatter.SourceText">
                                                    <Setter.Value>
                                                        <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                                            <Binding Source="hdd2befabg0819g4729g9c0egda41572787ee"/>
                                                            <Binding Path="DataContext.SourceObject.Name" RelativeSource="{RelativeSource Mode=Self}"/>
                                                        </MultiBinding>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>

                        </ls:LSNineSliceImage>

                        <Grid.Style>
                            <Style TargetType="Grid">
                                <Setter Property="Visibility" Value="Collapsed" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding RollState}" Value="IntroductionAnimation" >
                                        <Setter Property="Visibility" Value="Visible" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding RollState}" Value="WaitForStart" >
                                        <Setter Property="Visibility" Value="Visible" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding RollState}" Value="WaitForReRoll" >
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                    <Trigger Property="Tag" Value="HidePrompt">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Style>
                        <b:Interaction.Triggers>
                            <b:DataTrigger Binding="{Binding Tag, ElementName=prompt}" Value="PlaySound">
                                <ls:LSPlaySound Sound="UI_HUD_DiceRoll_ClickDragTooltip_Appear"/>
                            </b:DataTrigger>
                        </b:Interaction.Triggers>
                    </Grid>
                </Grid>
                <Control x:Name="DieRollAnimation" IsHitTestVisible="False" Style="{StaticResource DieRollStyle}">
                    <b:Interaction.Triggers>
                        <b:DataTrigger Binding="{Binding Path=Tag,ElementName=DieRollAnimation}" Value="AnimPlaying">
                            <b:ChangePropertyAction PropertyName="Tag" TargetName="ActiveRoll" Value="Rollingdice"/>
                        </b:DataTrigger>
                        <b:DataTrigger Binding="{Binding Path=Tag,ElementName=DieRollAnimation}" Value="AnimDone">
                            <b:ChangePropertyAction PropertyName="Tag" TargetName="ActiveRoll" Value="RevealResultAnimation"/>
                        </b:DataTrigger>
                    </b:Interaction.Triggers>
                </Control>
                
                <Grid x:Name="AnimationOverlayHolder" Tag="Init" IsHitTestVisible="False">
                    <Grid.Style>
                        <Style TargetType="Grid">
                            <Setter Property="Visibility" Value="Hidden" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=Tag,RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Value="RevealResultAnimation">
                                    <Setter Property="Visibility" Value="Visible" />
                                </DataTrigger>

                                <DataTrigger Binding="{Binding DataContext.RollState,RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Value="ResultReady" >
                                    <Setter Property="Visibility" Value="Hidden" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Grid.Style>
                    <ls:OverlayConnector x:Name="AnimationConnectorBaseBoosts" Source="{Binding ElementName=modlist}" >
                        <b:Interaction.Behaviors>
                            <ls:SequenceBehavior x:Name="AnimSeqBase" TimeOffset="0:0:0.8" CompletedDelay="0:0:1" />
                        </b:Interaction.Behaviors>
                    </ls:OverlayConnector>
                    <ls:OverlayConnector x:Name="AnimationConnectorSelectedBoosts" Source="{Binding ElementName=selectedboostmodlist}" >
                        <b:Interaction.Behaviors>
                            <ls:SequenceBehavior x:Name="AnimSeqSelected" TimeOffset="0:0:0.8" CompletedDelay="0:0:1.8" />
                        </b:Interaction.Behaviors>

                        <b:Interaction.Triggers>
                            <b:DataTrigger Binding="{Binding ElementName=AnimSeqBase ,Path=SequenceCompleted}" Value="True">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding ElementName=AnimationOverlayHolder,Path=Tag}" Operator="Equal" RightOperand="Step1"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>

                                <b:ChangePropertyAction TargetName="AnimationOverlayHolder" PropertyName="Tag" Value="Step2"/>
                                <b:ChangePropertyAction TargetName="AnimSeqSelected" PropertyName="Animate" Value="True"/>
                            </b:DataTrigger>

                        </b:Interaction.Triggers>
                    </ls:OverlayConnector>

                    <b:Interaction.Triggers>

                        <b:DataTrigger Binding="{Binding ElementName=AnimSeqSelected ,Path=SequenceCompleted}" Value="True">
                            <b:Interaction.Behaviors>
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding ElementName=AnimationOverlayHolder,Path=Tag}" Operator="Equal" RightOperand="Step2"/>
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <b:InvokeCommandAction Command="{Binding TriggerNextPhaseCommand}"/>
                        </b:DataTrigger>

                        <b:DataTrigger Binding="{Binding Path=Tag,ElementName=ResultHolder}" Value="AnimDone">
                            <b:Interaction.Behaviors>
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding RollState}" Operator="Equal" RightOperand="StartRoll"/>
                                        <b:ComparisonCondition LeftOperand="{Binding FinalResult}" Operator="NotEqual" RightOperand="1"/>
                                        <b:ComparisonCondition LeftOperand="{Binding FinalResult}" Operator="NotEqual" RightOperand="20"/>
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <b:ChangePropertyAction TargetName="AnimationOverlayHolder" PropertyName="Tag" Value="Step1"/>
                            <b:ChangePropertyAction TargetName="AnimSeqBase" PropertyName="Animate" Value="True"/>
                        </b:DataTrigger>

                        <b:DataTrigger Binding="{Binding Path=Tag,ElementName=ResultHolder}" Value="AnimDone">
                            <b:Interaction.Behaviors>
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding FinalResult}" Operator="Equal" RightOperand="20"/>
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <b:InvokeCommandAction Command="{Binding TriggerNextPhaseCommand}"/>
                        </b:DataTrigger>

                        <b:DataTrigger Binding="{Binding Path=Tag,ElementName=ResultHolder}" Value="AnimDone">
                            <b:Interaction.Behaviors>
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding FinalResult}" Operator="Equal" RightOperand="1"/>
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <b:InvokeCommandAction Command="{Binding TriggerNextPhaseCommand}"/>
                        </b:DataTrigger>
                    </b:Interaction.Triggers>

                </Grid>

                <Grid x:Name="buttonGroup" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,1300,0,0" MinWidth="890" Background="Transparent">
                    <Grid.Style>
                        <Style TargetType="Grid">
                            <Setter Property="Visibility" Value="Collapsed" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding RollState}" Value="ResultReady" >
                                    <Setter Property="Visibility" Value="Visible" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Grid.Style>
                    <b:Interaction.Triggers>
                        <b:DataTrigger Binding="{Binding RollState}" Value="ResultReady" >
                            <b:Interaction.Behaviors>
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding Success}" Operator="Equal" RightOperand="False"/>
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource FailButtonAnimation}" />
                            <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource toplist.FadeOut}" />
                        </b:DataTrigger>

                        <b:DataTrigger Binding="{Binding RollState}" Value="ResultReady" >
                            <b:Interaction.Behaviors>
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding Success}" Operator="Equal" RightOperand="True"/>
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource SuccessButtonAnimation}" />
                            <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource toplist.FadeOut}" />
                        </b:DataTrigger>

                        <b:DataTrigger Binding="{Binding RollState}" Value="StartRoll">
                            <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource BonussesTitle.FadeOut}" />
                        </b:DataTrigger>
                        <!---->
                    </b:Interaction.Triggers>
                    <!-- Make BG Transparent to fix tooltips showing over opacity 0 bonus elements -->
                    <StackPanel Background="Transparent" x:Name="FailButtons" Visibility="Collapsed" Orientation="Vertical" RenderTransformOrigin="0.5,0.5" IsEnabled="False" >
                        <StackPanel.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform/>
                                <SkewTransform/>
                                <RotateTransform/>
                                <TranslateTransform Y="0"/>
                            </TransformGroup>
                        </StackPanel.RenderTransform>
                        <StackPanel MinHeight="280">
                            <Grid x:Name="InspirationRerollHolder" Visibility="Collapsed">
                                <Image x:Name="RerollPaneBg" Visibility="Hidden" Opacity="0" Source="pack://application:,,,/Core;component/Assets/ActiveRoll/rerollPane.png" Stretch="None" Margin="-18,0,0,0">
                                    <Image.RenderTransform>
                                        <TranslateTransform X="0" Y="0"/>
                                    </Image.RenderTransform>
                                </Image>
                                <StackPanel x:Name="RerollPaneContent" Opacity="0" Visibility="Hidden" ls:TutorialProperties.TargetID="TUT_Reroll" ls:TutorialProperties.ModalType="Bottom" ls:TutorialProperties.Padding="-140,-70,-140,-20">
                                    <StackPanel.RenderTransform>
                                        <TranslateTransform Y="0"/>
                                    </StackPanel.RenderTransform>
                                    <ls:LSButton x:Name="RollAgainButton" Command="{Binding RollAgainCommand}" Content="{Binding Converter={StaticResource TranslatedStringConverter}, Source=h62c407a0g5c70g4d88g8510gecdb08a44236}" VerticalAlignment="Center" Margin="4,90,0,0" SoundID="UI_HUD_ActiveRoll_RollAgain">
                                        <ls:LSButton.Style>
                                            <Style BasedOn="{StaticResource SmallButtonStyle}" TargetType="ls:LSButton">
                                                <Setter Property="IsEnabled" Value="False"/>
                                                <Style.Triggers>
                                                    <MultiDataTrigger >
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding CanRespondToCommands}" Value="True"/>
                                                            <Condition Binding="{Binding InspirationPoints, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter Property="IsEnabled" Value="True"/>
                                                    </MultiDataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </ls:LSButton.Style>
                                    </ls:LSButton>
                                    <TextBlock Foreground="{StaticResource LS_baseTxtColor}" FontSize="{StaticResource MediumFontSize}" Margin="0,0,0,30" VerticalAlignment="Bottom" HorizontalAlignment="Center" TextAlignment="Center">
                        <Run Text="{Binding Converter={StaticResource TranslatedStringConverter}, Source=he6adfaa2g81bag42f1g844egb23de6220031, Mode=OneTime}" />
                        <Run Text="{Binding InspirationPoints, Mode=OneWay, StringFormat='({0})'}"/>
                                    </TextBlock>
                                </StackPanel>
                            </Grid>

                            <Grid x:Name="TryAgainHolder" Visibility="Collapsed">
                                <Image x:Name="TryAgainPaneBg" Visibility="Hidden" Opacity="0" Source="pack://application:,,,/Core;component/Assets/ActiveRoll/tryAgainPane.png" Stretch="None" Margin="-18,0,0,0">
                                    <Image.RenderTransform>
                                        <TranslateTransform X="0" Y="0"/>
                                    </Image.RenderTransform>
                                </Image>
                                <StackPanel x:Name="TryAgainPaneContent" Opacity="0" Visibility="Hidden">
                                    <StackPanel.RenderTransform>
                                        <TranslateTransform Y="0"/>
                                    </StackPanel.RenderTransform>
                                    <ls:LSButton x:Name="TryAgainButton" Command="{Binding TryAgainCommand}" Content="{Binding Converter={StaticResource TranslatedStringConverter}, Source=h0ab67992g5f7cg4402gbd1dg07ea74fa5309}" Style="{StaticResource SmallButtonStyle}" VerticalAlignment="Center" Margin="4,60,0,0" SoundID="UI_HUD_ActiveRoll_RollAgain"/>
                                    <TextBlock Foreground="{StaticResource LS_baseTxtColor}" FontSize="{StaticResource MediumFontSize}" Margin="0,0,0,30" VerticalAlignment="Bottom" HorizontalAlignment="Center" TextAlignment="Center">
                                        <Run Text="{Binding Converter={StaticResource TranslatedStringConverter}, Source=h46fcf911ga536g481fg9384gaabff3bf7720, Mode=OneTime}" />
                                        <Run Text="{Binding ContextObjectCount, Converter={StaticResource AddConverter}, ConverterParameter='-1', Mode=OneWay, StringFormat='({0})'}"/>
                                    </TextBlock>
                                </StackPanel>
                            </Grid>
                        </StackPanel>

                        <Grid x:Name="ContinueButtonHolder">
                            <ls:LSButton x:Name="ContinueBtn" Style="{StaticResource BlueEdgeButtonStyle}" Margin="0,40,0,40" Content="{Binding Converter={StaticResource TranslatedStringConverter}, Source=h560d086ag3144g4595g9129ge69f0383a226}" IsEnabled="{Binding CanRespondToCommands}">
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Click">
                                        <b:InvokeCommandAction Command="{Binding ContinueCommand}"/>
                                        <ls:LSPlaySound Sound="UI_HUD_DiceRoll_Continue"/>
                                        <ls:LSPlaySound Sound="UI_HUD_DiceRoll_Disappear"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>
                            </ls:LSButton>
                        </Grid>
                    </StackPanel>
                    <Border x:Name="SuccessButtonHolder" IsEnabled="{Binding CanRespondToCommands}">
                        <ls:LSButton x:Name="SuccessButtons" Visibility="Collapsed" Opacity="0"  Style="{StaticResource BlueEdgeButtonStyle}" Content="{Binding Converter={StaticResource TranslatedStringConverter},Source=h560d086ag3144g4595g9129ge69f0383a226}" HorizontalAlignment="Center" Margin="0,300,0,0">
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="Click">
                                    <b:InvokeCommandAction Command="{Binding ContinueCommand}"/>
                                    <ls:LSPlaySound Sound="UI_HUD_DiceRoll_Continue"/>
                                    <ls:LSPlaySound Sound="UI_HUD_DiceRoll_Disappear"/>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                            <ls:LSButton.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform Y="0"/>
                                </TransformGroup>
                            </ls:LSButton.RenderTransform>
                        </ls:LSButton>
                    </Border>

                    <ls:LSNineSliceImage x:Name="PostRollPromptHolder" Slices="44" Padding="60,4" MinHeight="120" MinWidth="440" ImageSource="{StaticResource RollPromptImage}" Visibility="{Binding CanRespondToCommands, Converter={StaticResource BoolToCollapsedConverter}}" HorizontalAlignment="Center">
                        <TextBlock x:Name="PostRollPromptListener" TextAlignment="Center" VerticalAlignment="Center" Foreground="{StaticResource LS_baseTxtColor}">
                            <ls:TextBlockFormatter.SourceText>
                                <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                    <Binding Source="h1b4c497eg18a1g436eg9af5g28d16cf1ef2f"/>
                                    <Binding Path="DataContext.SourceObject.Name" RelativeSource="{RelativeSource Mode=Self}"/>
                                </MultiBinding>
                            </ls:TextBlockFormatter.SourceText>
                        </TextBlock>

                    </ls:LSNineSliceImage>
                </Grid>
                <ls:LSNineSliceImage x:Name="DiceSelector" Width="1024" MinHeight="828" ImageSource="{StaticResource DiceSelectorBackgroundImage}" VerticalAlignment="Bottom" HorizontalAlignment="Left" Slices="0,588,0,236" Margin="35,0,0,177" Padding="80,46,80,80" Visibility="{Binding ElementName=DiceModToggle,Path=IsChecked,Converter={StaticResource BoolToVisibleConverter}}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="134"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <TextBlock Text="{Binding Converter={StaticResource TranslatedStringConverter},Source=h0edd1324g5542g4a47g8201g2e0f5bc29630}" VerticalAlignment="Center" HorizontalAlignment="Center" TextAlignment="Center" Foreground="{StaticResource LS_extraspecialTxtColor}"/>
                        
                        <ListBox Grid.Row="1"   x:Name="DiceStyleList" ItemsSource="{Binding DiceStyleList}" SelectedItem="{Binding CurrentDiceStyle, Mode=OneWay}" ScrollViewer.HorizontalScrollBarVisibility="Disabled">
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="SelectionChanged">
                                    <b:InvokeCommandAction Command="{Binding SelectDiceTypeCommand}" CommandParameter="{Binding ElementName=DiceStyleList, Path=SelectedItem}"/>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                            <ListBox.ItemTemplate>
                                <DataTemplate DataType="{x:Type ls:VMDiceStyle}">
                                    <DataTemplate.Resources>
                                        <ImageSource x:Key="BGImg">pack://application:,,,/Core;component/Assets/DiceSelector/diceSelector_li_d.png</ImageSource>
                                        <ImageSource x:Key="CircleImg">pack://application:,,,/Core;component/Assets/DiceSelector/diceSelector_checkbox_bg_d.png</ImageSource>
                                        <ImageSource x:Key="CheckImg">pack://application:,,,/Core;component/Assets/Reactions/ico_check_d.png</ImageSource>
                                        <Style TargetType="ls:AnimatedImage">
                                            <Setter Property="Template" Value="{StaticResource SizedAnimatedImage}" />
                                            <Setter Property="ClipSize" Value="256,256"/>
                                            <Setter Property="Margin" Value="0"/>
                                            <Setter Property="RepeatBehavior" Value="1x"/>
                                            <Setter Property="LastFrame" Value="20"/>
                                        </Style>
                                    </DataTemplate.Resources>
                                    <Grid x:Name="DiceStyleRoot" MinHeight="121">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="160"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="160"/>
                                        </Grid.ColumnDefinitions>
                                        <Image x:Name="bg" Source="{StaticResource BGImg}" Stretch="None" VerticalAlignment="Bottom" Grid.ColumnSpan="3" Margin="0,0,0,-16" />
                                        <ls:AnimatedImage x:Name="DiceImg" Frame="20" Width="108" Height="108">
                                            <ls:AnimatedImage.Source>
                                                <MultiBinding Converter="{StaticResource DiceImageSourceConverter}" >
                                                    <Binding Path="."/>
                                                    <Binding Source="/d20"/>
                                                </MultiBinding>
                                            </ls:AnimatedImage.Source>
                                        </ls:AnimatedImage>

                                        <TextBlock x:Name="nameTxt" Grid.Column="1" Text="{Binding Name}" VerticalAlignment="Center" Foreground="{StaticResource LS_baseTxtColor}" />
                                        <Grid Grid.Column="2" VerticalAlignment="Center" >
                                            <Image x:Name="circle" Source="{StaticResource CircleImg}" Stretch="None"/>
                                            <Image x:Name="check" Source="{StaticResource CheckImg}" Stretch="None" Visibility="Collapsed"/>
                                        </Grid>
                                        <b:Interaction.Triggers>
                                            <b:EventTrigger EventName="MouseEnter">
                                                <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                                            </b:EventTrigger>
                                            <b:EventTrigger EventName="MouseDown">
                                                <ls:LSPlaySound Sound="UI_Shared_CheckBox"/>
                                            </b:EventTrigger>
                                        </b:Interaction.Triggers>
                                    </Grid>
                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                                            <Setter TargetName="bg" Property="Source" Value="pack://application:,,,/Core;component/Assets/DiceSelector/diceSelector_li_h.png"/>
                                            <Setter TargetName="circle" Property="Source" Value="pack://application:,,,/Core;component/Assets/DiceSelector/diceSelector_checkbox_bg_h.png"/>
                                            <Setter TargetName="nameTxt" Property="Foreground" Value="{StaticResource LS_accent75TxtColor}"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                                            <Setter TargetName="check" Property="Visibility" Value="Visible"/>
                                            <Setter TargetName="nameTxt" Property="Foreground" Value="{StaticResource LS_tint100}"/>
                                        </DataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>
                    </Grid>                    
                </ls:LSNineSliceImage>

                <ls:LSToggleButton x:Name="DiceModToggle" Margin="154,0,0,81" VerticalAlignment="Bottom" HorizontalAlignment="Left" IsChecked="False" IsEnabled="False">
                    <ls:LSToggleButton.ToolTip>
                        <ls:LSTooltip>
                            <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source=h8cf800dbg79f9g49a8ga65agdb87546d680d, Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipDefaultTextStyle}"/>
                        </ls:LSTooltip>
                    </ls:LSToggleButton.ToolTip>
                    <ls:LSToggleButton.Template>
                        <ControlTemplate TargetType="ls:LSToggleButton">
                            <ControlTemplate.Resources>
                                <ImageSource x:Key="ButtonNormal">pack://application:,,,/Core;component/Assets/DiceSelector/diceSelector_btn_d.png</ImageSource>
                            </ControlTemplate.Resources>
                            <Image x:Name="img" Source="{StaticResource ButtonNormal}" Stretch="None"/>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Source" Value="pack://application:,,,/Core;component/Assets/DiceSelector/diceSelector_btn_h.png" TargetName="img"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Source" Value="pack://application:,,,/Core;component/Assets/DiceSelector/diceSelector_btn_p.png" TargetName="img"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Source" Value="pack://application:,,,/Core;component/Assets/DiceSelector/diceSelector_btn_disabled.png" TargetName="img"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </ls:LSToggleButton.Template>
                </ls:LSToggleButton>
            </Grid>
            <ControlTemplate.Triggers>
                <DataTrigger Binding="{Binding RollContext}" Value="LockPick">
                    <Setter TargetName="ToolsHolder" Property="Visibility" Value="Visible"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding RollContext}" Value="DisarmTrap">
                    <Setter TargetName="ToolsHolder" Property="Visibility" Value="Visible"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding RollState}" Value="WaitForStart" >
                    <Setter TargetName="ToolsHolder" Property="Opacity" Value="1" />
                    <Setter TargetName="DiceModToggle" Property="IsEnabled" Value="True" />
                </DataTrigger>
                <Trigger Property="IsEnabled" SourceName="DiceModToggle" Value="False">
                    <Setter TargetName="DiceModToggle" Property="IsChecked" Value="False" />
                </Trigger>
                <DataTrigger Binding="{Binding RollState}" Value="WaitForReRoll" >
                    <Setter TargetName="ToolsHolder" Property="Opacity" Value="1" />
                </DataTrigger>
                <DataTrigger Binding="{Binding RollState}" Value="IntroductionAnimation" >
                    <Setter TargetName="ToolsHolder" Property="Opacity" Value="1" />
                </DataTrigger>
                <DataTrigger Binding="{Binding DiceStyleList.Count,Converter={StaticResource GreaterThanConverter},ConverterParameter=1}" Value="False" >
                    <Setter TargetName="DiceModToggle" Property="Visibility" Value="Collapsed" />
                </DataTrigger>
                <DataTrigger Binding="{Binding CanRespondToCommands}" Value="False" >
                    <Setter TargetName="DiceModToggle" Property="Visibility" Value="Collapsed" />
                </DataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CanRespondToCommands}" Value="True"/>
                        <Condition Binding="{Binding RollContext}" Value="LockPick"/>
                        <Condition Binding="{Binding ContextObjectCount, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                    </MultiDataTrigger.Conditions>

                    <Setter TargetName="TryAgainHolder" Property="Visibility" Value="Visible" />
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CanRespondToCommands}" Value="False"/>
                        <Condition Binding="{Binding RollContext}" Value="LockPick"/>
                        <Condition Binding="{Binding ContextObjectCount, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                    </MultiDataTrigger.Conditions>

                    <Setter TargetName="ContinueButtonHolder" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="SuccessButtonHolder" Property="Visibility" Value="Collapsed"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CanRespondToCommands}" Value="False"/>
                        <Condition Binding="{Binding RollContext}" Value="LockPick"/>
                        <Condition Binding="{Binding ContextObjectCount, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                        <Condition Binding="{Binding Success}" Value="False"/>
                    </MultiDataTrigger.Conditions>

                    <Setter TargetName="PostRollPromptListener" Property="ls:TextBlockFormatter.SourceText">
                        <Setter.Value>
                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                <Binding Source="he06c0f84g0a9bg4679ga784gdfab1ea8908f"/>
                                <Binding Path="DataContext.SourceObject.Name" RelativeSource="{RelativeSource Mode=Self}"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CanRespondToCommands}" Value="True"/>
                        <Condition Binding="{Binding InspirationPoints, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                    </MultiDataTrigger.Conditions>

                    <Setter TargetName="InspirationRerollHolder" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CanRespondToCommands}" Value="False"/>
                        <Condition Binding="{Binding InspirationPoints, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                    </MultiDataTrigger.Conditions>

                    <Setter TargetName="ContinueButtonHolder" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="SuccessButtonHolder" Property="Visibility" Value="Collapsed"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CanRespondToCommands}" Value="False"/>
                        <Condition Binding="{Binding InspirationPoints, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                        <Condition Binding="{Binding Success}" Value="False"/>
                    </MultiDataTrigger.Conditions>

                    <Setter TargetName="PostRollPromptListener" Property="ls:TextBlockFormatter.SourceText">
                        <Setter.Value>
                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                <Binding Source="he06c0f84g0a9bg4679ga784gdfab1ea8908f"/>
                                <Binding Path="DataContext.SourceObject.Name" RelativeSource="{RelativeSource Mode=Self}"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger>

                <DataTrigger Binding="{Binding IsMouseOver, ElementName=ToolsHolder}" Value="True">
                    <Setter TargetName="ToolsHolderBG" Property="Source" Value="{StaticResource ItemModifierBucketImageHover}"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding RollState}" Value="WaitForStart">
                    <Setter TargetName="BoostContainer" Property="Visibility" Value="Visible"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding RollState}" Value="WaitForReRoll">
                    <Setter TargetName="BoostContainer" Property="Visibility" Value="Visible"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding RollContext}" Value="LockPick">
                    <Setter TargetName="CloseButton" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="CloseButton_2" Property="Visibility" Value="Visible"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding RollContext}" Value="DisarmTrap">
                    <Setter TargetName="CloseButton" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="CloseButton_2" Property="Visibility" Value="Visible"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding RollContext}" Value="PickPocket">
                    <Setter TargetName="CloseButton" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="CloseButton_2" Property="Visibility" Value="Visible"/>
                </DataTrigger>
                
                <DataTrigger Binding="{Binding IsTriggeredByScript}" Value="True">
                    <Setter TargetName="CloseButton" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="CloseButton_2" Property="Visibility" Value="Collapsed"/>
                </DataTrigger>

                <!-- KELA NEW -->
                <!-- <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.IsInCamp}" Value="True">
                    <Setter TargetName="CloseButton" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="CloseButton_2" Property="Visibility" Value="Visible"/>
                </DataTrigger> -->

                <DataTrigger Binding="{Binding RollState}" Value="WaitForReRoll">
                    <Setter TargetName="CloseButton" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="CloseButton_2" Property="Visibility" Value="Collapsed"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding RollState}" Value="StartRoll">
                    <Setter TargetName="CloseButton" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="CloseButton_2" Property="Visibility" Value="Collapsed"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding RollState}" Value="StopRoll">
                    <Setter TargetName="CloseButton" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="CloseButton_2" Property="Visibility" Value="Collapsed"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding RollState}" Value="ResultReady">
                    <Setter TargetName="CloseButton" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="CloseButton_2" Property="Visibility" Value="Collapsed"/>

                    <DataTrigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard FillBehavior="Stop">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PostRollPromptHolder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:3.0" Value="0"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:3.5" Value="1"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </BeginStoryboard>
                    </DataTrigger.EnterActions>
                </DataTrigger>

                <Trigger SourceName="BoostList" Property="Visibility" Value="Visible">
                    <Setter TargetName="CloseButton_2" Property="Visibility" Value="Collapsed"/>
                </Trigger>

                <DataTrigger Binding="{Binding RollState}" Value="StartRoll">
                    <Setter Property="IsEnabled" TargetName="UserTriggerEsc" Value="True"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding RollState}" Value="WaitForStart">
                    <Setter Property="IsEnabled" TargetName="UserTrigger" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding RollState}" Value="WaitForReRoll">
                    <Setter Property="IsEnabled" TargetName="UserTrigger" Value="False"/>
                </DataTrigger>

            </ControlTemplate.Triggers>
        </ControlTemplate>
    </ls:UIWidget.Template>
</ls:UIWidget>
<ls:UIWidget 
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:ls="clr-namespace:ls;assembly=Code"
             xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:System="clr-namespace:System;assembly=mscorlib"
             d:DataContext="{d:DesignInstance Type=ls:DCActiveRoll}"
             mc:Ignorable="d"
             x:Name="ActiveRoll"
             ls:UIWidget.UseCustomDC="True" Tag="0"
             ls:UIWidget.ContextName="ActiveRoll"
             d:DesignHeight="2160" d:DesignWidth="3840"
             FocusDown="UIDown" FocusLeft="UILeft" FocusRight="UIRight" FocusUp="UIUp"
             ls:MoveFocus.FocusMovementMode="Closest">

    <ls:AttachedProperties.AutomationId>
        <MultiBinding StringFormat="{}ActiveRoll_c_{0}">
            <Binding Path="(ls.UICanvas.CanvasLayout)" RelativeSource="{RelativeSource Mode=Self}"/>
        </MultiBinding>
    </ls:AttachedProperties.AutomationId>

    <ls:UIWidget.Template>
        <ControlTemplate TargetType="ls:UIWidget">
            <ControlTemplate.Resources>
                <ResourceDictionary>
                    <ResourceDictionary.MergedDictionaries>
                        <ResourceDictionary Source="/Core;component/Library/DiceAnimation.xaml"/>
                    </ResourceDictionary.MergedDictionaries>

                    <System:Double x:Key="ResultTextViewBoxWidth">640</System:Double>

                    <Style x:Key="BaseTxtStyle" TargetType="{x:Type TextBlock}">
                        <Setter Property="FontSize" Value="{StaticResource DefaultFontSize}"/>
                        <Setter Property="Background" Value="Transparent"/>
                        <Setter Property="Foreground" Value="{StaticResource LS_baseTxtColor}"/>
                        <Setter Property="noesis:Text.Stroke" Value="{StaticResource LS_tint00}"/>
                        <Setter Property="noesis:Text.StrokeThickness" Value="6"/>
                        <Setter Property="TextAlignment" Value="Center"/>
                        <Setter Property="TextWrapping" Value="Wrap"/>
                        <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
                        <Setter Property="RenderTransform" >
                            <Setter.Value>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform />
                                </TransformGroup>
                            </Setter.Value>
                        </Setter>
                    </Style>

                    <ControlTemplate x:Key="ListItemTemplate" TargetType="{x:Type ListBoxItem}">
                        <ControlTemplate.Resources>
                            <BitmapImage x:Key="ListButtonBG" UriSource="pack://application:,,,/Core;component/Assets/Shared_c/c_list_buttonBG_general.png"/>
                            <BitmapImage x:Key="ListButtonH" UriSource="pack://application:,,,/Core;component/Assets/Shared_c/c_list_buttonBG_h.png"/>
                            <BitmapImage x:Key="ListButtonH1" UriSource="pack://application:,,,/Core;component/Assets/Shared_c/c_list_buttonBG_h1.png"/>
                            <BitmapImage x:Key="ListButtonH2" UriSource="pack://application:,,,/Core;component/Assets/Shared_c/c_list_buttonBG_h2.png"/>

                            <Thickness x:Key="ListButtonBGSlices">150,50,150,50</Thickness>
                            <Thickness x:Key="SelectorSlices">48,72,48,72</Thickness>

                            <Storyboard x:Key="ListButtonSelectedStoryboard" RepeatBehavior="Forever" AutoReverse="True">
                                <DoubleAnimation Storyboard.TargetName="Image1" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:6"/>
                                <DoubleAnimation Storyboard.TargetName="Image2" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:6"/>
                            </Storyboard>

                        </ControlTemplate.Resources>

                        <Grid Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" HorizontalAlignment="Left">
                            <ls:LSNineSliceImage x:Name="BgImg" ImageSource="{StaticResource ListButtonBG}" Slices="{StaticResource ListButtonBGSlices}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" />
                            <ls:LSNineSliceImage x:Name="HLImg" ImageSource="{StaticResource ListButtonH}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Margin="2,4" Visibility="Collapsed"/>
                            <ls:LSNineSliceImage x:Name="Image1" ImageSource="{StaticResource ListButtonH1}" Slices="{StaticResource SelectorSlices}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Margin="-20,-16" Opacity="1" Visibility="Collapsed"/>
                            <ls:LSNineSliceImage x:Name="Image2" ImageSource="{StaticResource ListButtonH2}" Slices="{StaticResource SelectorSlices}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Margin="-20,-16" Opacity="0" Visibility="Collapsed"/>
                            <ContentPresenter x:Name="ContentHolder"/>
                        </Grid>

                        <ControlTemplate.Triggers>
                            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                <BeginStoryboard x:Name="HighlightSelectionOnLoad" Storyboard="{StaticResource ListButtonSelectedStoryboard}"/>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="ListBoxItem.Selected">
                                <BeginStoryboard x:Name="HighlightSelection" Storyboard="{StaticResource ListButtonSelectedStoryboard}"/>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="ListBoxItem.Unselected">
                                <StopStoryboard BeginStoryboardName="HighlightSelection"/>
                                <StopStoryboard BeginStoryboardName="HighlightSelectionOnLoad"/>
                            </EventTrigger>
                            <Trigger Property="ls:MoveFocus.IsKeyboardFocusWithin" Value="True">
                                <Setter Property="Foreground" Value="{StaticResource LS_accent100TxtColor}"/>
                                <Setter TargetName="HLImg" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="Image1" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="Image2" Property="Visibility" Value="Visible"/>
                                
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>

                    <Style x:Key="BonusNameTxtStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource BaseTxtStyle}">
                        <Setter Property="FontSize" Value="{StaticResource ScaledSmallFontSize}"/>
                        <Setter Property="MaxWidth" Value="260"/>
                        <Setter Property="LineHeight" Value="{StaticResource ScaledSmallFontSizeLineHeight}"/>
                        <Setter Property="LineStackingStrategy" Value="BlockLineHeight"/>
                    </Style>

                    <Style x:Key="BonusValueTxtStyle" TargetType="{x:Type TextBlock}"  BasedOn="{StaticResource BaseTxtStyle}">
                        <Setter Property="FontSize" Value="{StaticResource ScaledLargeFontSize}"/>
                        <Setter Property="Foreground" Value="{StaticResource LS_extraspecialTxtColor}"/>
                    </Style>

                    <System:Double x:Key="BoostContentHeight">280</System:Double>
                    <System:Double x:Key="BoostContentWidth">260</System:Double>

                    <System:Double x:Key="BoostIconHeight">82</System:Double>
                    <System:Double x:Key="BoostIconWidth">82</System:Double>

                    <ImageSource x:Key="DialogueSeparatorImage">pack://application:,,,/Core;component/Assets/ActiveRoll/dialogueSeparator.png</ImageSource>
                    <ImageSource x:Key="ItemSlotImage">pack://application:,,,/Core;component/Assets/ActiveRoll/itemSlot.png</ImageSource>
                    <ImageSource x:Key="ItemModifierBucketImage">pack://application:,,,/Core;component/Assets/ActiveRoll_c/c_activeRoll_bonusBox_white_d.png</ImageSource>
                    <ImageSource x:Key="ItemModifierBucketImageHover">pack://application:,,,/Core;component/Assets/ActiveRoll_c/c_activeRoll_bonusBox_white_h.png</ImageSource>
                    <ImageSource x:Key="RollModifierBucketImage">pack://application:,,,/Core;component/Assets/ActiveRoll_c/c_activeRoll_bonusBox_d.png</ImageSource>
                    <ImageSource x:Key="RollModifierBucketImageHover">pack://application:,,,/Core;component/Assets/ActiveRoll_c/c_activeRoll_bonusBox_h.png</ImageSource>
                    <ImageSource x:Key="ActiveRollFrameImage">pack://application:,,,/Core;component/Assets/ActiveRoll_c/c_ActiveRollFrame.png</ImageSource>
                    <ImageSource x:Key="StartRollPromptFrameImage">pack://application:,,,/Core;component/Assets/ActiveRoll_c/c_promptFrame_startRoll.png</ImageSource>
                    <ImageSource x:Key="ActiveRollDividerImage">pack://application:,,,/Core;component/Assets/ActiveRoll_c/c_activeRoll_Vdivider.png</ImageSource>
                    <ImageSource x:Key="AddBonusFrameImage">pack://application:,,,/Core;component/Assets/ActiveRoll_c/c_promptFrame_addBonus.png</ImageSource>
                    <ImageSource x:Key="BonusListBackground">pack://application:,,,/Core;component/Assets/ActiveRoll_c/faded_BG.png</ImageSource>

                    <DataTemplate DataType="ls:VMCharacterAction">
                        <ContentControl  ToolTip="{StaticResource ManagedTooltip}" ToolTipService.ShowOnDisabled="True">
                            <Grid Height="{StaticResource BoostContentHeight}" Width="{StaticResource BoostContentWidth}" Background="Transparent">
                                <Grid Width="{StaticResource BoostIconWidth}" Height="{StaticResource BoostIconHeight}" VerticalAlignment="Center">
                                    <Rectangle Fill="{Binding Icon}"/>
                                    <TextBlock Text="{Binding SpellSlotLevel, Converter={StaticResource DecimalToRomanConverter}}" Foreground="{StaticResource LS_specialTxtColor}" VerticalAlignment="Bottom" HorizontalAlignment="Right" Height="35" Margin="0,0,3,0" FontSize="32" FontWeight="Bold" noesis:Text.Stroke="#FF000000" noesis:Text.StrokeThickness="5"/>
                                </Grid>
                                <TextBlock x:Name="SpellNameText" Text="{Binding Name}" Style="{StaticResource BonusNameTxtStyle}" VerticalAlignment="Bottom"  />

                                <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                    <Image x:Name="img" Stretch="None" Visibility="Collapsed" />
                                    <TextBlock x:Name="desc" Text="{Binding Description}" />
                                </StackPanel>

                                <b:Interaction.Triggers>
                                    <b:DataTrigger Binding="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType=ContentControl}}" Value="BlinkHl">
                                        <b:InvokeCommandAction Command="{Binding DataContext.PlaySoundEventOnElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                            <b:InvokeCommandAction.CommandParameter>
                                                <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                                    <Binding Mode="OneWay" ElementName="img" />
                                                    <Binding Source="UI_HUD_DiceRoll_Bonus_Appear"/>
                                                </MultiBinding>
                                            </b:InvokeCommandAction.CommandParameter>
                                        </b:InvokeCommandAction>
                                        <b:InvokeCommandAction Command="{Binding DataContext.PlaySoundEventOnElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                            <b:InvokeCommandAction.CommandParameter>
                                                <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                                    <Binding Mode="OneWay" ElementName="img" />
                                                    <Binding Source="UI_HUD_DiceRoll_BonusType_Spell"/>
                                                </MultiBinding>
                                            </b:InvokeCommandAction.CommandParameter>
                                        </b:InvokeCommandAction>
                                    </b:DataTrigger>
                                </b:Interaction.Triggers>
                            </Grid>
                        </ContentControl>
                    </DataTemplate>

                    <DataTemplate DataType="{x:Type ls:VMPassive}">
                        <Grid Height="{StaticResource BoostContentHeight}" Width="{StaticResource BoostContentWidth}" ToolTip="{StaticResource ManagedTooltip}" ToolTipService.ShowOnDisabled="True" ToolTipService.Placement="Right" Background="Transparent">
                            <Grid Background="{Binding Icon}" Width="{StaticResource BoostIconWidth}" Height="{StaticResource BoostIconHeight}" VerticalAlignment="Center"  Margin="0,0,0,20"/>
                            <TextBlock x:Name="SpellNameText" Text="{Binding Name}" Style="{StaticResource BonusNameTxtStyle}" VerticalAlignment="Bottom"/>

                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                <Image x:Name="img" Stretch="None" Visibility="Collapsed" />
                                <TextBlock x:Name="desc" Text="{Binding Description}" />
                            </StackPanel>

                            <b:Interaction.Triggers>
                                <b:DataTrigger Binding="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType=ls:LSListBoxItem}}" Value="BlinkHl">
                                    <b:InvokeCommandAction Command="{Binding DataContext.PlaySoundEventOnElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                        <b:InvokeCommandAction.CommandParameter>
                                            <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                                <Binding Mode="OneWay" ElementName="img" />
                                                <Binding Source="UI_HUD_DiceRoll_Bonus_Appear"/>
                                            </MultiBinding>
                                        </b:InvokeCommandAction.CommandParameter>
                                    </b:InvokeCommandAction>
                                    <b:InvokeCommandAction Command="{Binding DataContext.PlaySoundEventOnElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                        <b:InvokeCommandAction.CommandParameter>
                                            <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                                <Binding Mode="OneWay" ElementName="img"  />
                                                <Binding Source="UI_HUD_DiceRoll_BonusType_ToggledPassive"/>
                                            </MultiBinding>
                                        </b:InvokeCommandAction.CommandParameter>
                                    </b:InvokeCommandAction>
                                </b:DataTrigger>
                            </b:Interaction.Triggers>
                        </Grid>
                    </DataTemplate>

                    <DataTemplate DataType="ls:VMItem">
                        <Grid Height="{StaticResource BoostContentHeight}" Width="{StaticResource BoostContentWidth}">
                            <ContentControl ToolTip="{StaticResource ManagedTooltip}" ToolTipService.ShowOnDisabled="True" >
                                <ls:LSEntityObject VerticalAlignment="Center" Width="{DynamicResource ItemIconSize}" Height="{DynamicResource ItemIconSize}" Context="Inventory" EntityRef="{Binding EntityHandle}" Background="Transparent">
                                    <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource Template.GameObject}" IsHitTestVisible="False"/>
                                </ls:LSEntityObject>
                            </ContentControl>
                            <TextBlock x:Name="label" Tag="UI_HUD_DiceRoll_BonusType_Default" Text="{Binding Name}" VerticalAlignment="Bottom" Style="{StaticResource BonusNameTxtStyle}" />
                            <b:Interaction.Triggers>
                                <b:DataTrigger Binding="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType=ContentControl}}" Value="BlinkHl">
                                    <b:InvokeCommandAction Command="{Binding DataContext.PlaySoundEventOnElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                        <b:InvokeCommandAction.CommandParameter>
                                            <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                                <Binding Mode="OneWay" ElementName="label" />
                                                <Binding Source="UI_HUD_DiceRoll_Bonus_Appear"/>
                                            </MultiBinding>
                                        </b:InvokeCommandAction.CommandParameter>
                                    </b:InvokeCommandAction>
                                    <b:InvokeCommandAction Command="{Binding DataContext.PlaySoundEventOnElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                        <b:InvokeCommandAction.CommandParameter>
                                            <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                                <Binding Mode="OneWay" ElementName="label" />
                                                <Binding Path="Tag" ElementName="label"/>
                                            </MultiBinding>
                                        </b:InvokeCommandAction.CommandParameter>
                                    </b:InvokeCommandAction>
                                </b:DataTrigger>
                            </b:Interaction.Triggers>
                        </Grid>
                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{Binding UseType}" Value="Potion">
                                <Setter TargetName="label" Property="Tag" Value="UI_HUD_DiceRoll_BonusType_Potion" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding UseType}" Value="Scroll">
                                <Setter TargetName="label" Property="Tag" Value="UI_HUD_DiceRoll_BonusType_Scroll" />
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>

                    <DataTemplate DataType="ls:VMAdvantage">
                        <DataTemplate.Resources>
                            <ImageSource x:Key="SituationalIcon">pack://application:,,,/Core;component/Assets/Shared/Situation.png</ImageSource>
                        </DataTemplate.Resources>
                        <ContentControl x:Name="BoostHolder" ToolTipService.ShowOnDisabled="True">
                            <ContentControl.ToolTip>
                                <ls:LSTooltip PlayerId="{Binding Path=DataContext.CurrentPlayer.PlayerId, ElementName=ActiveRoll}" ls:TooltipExtender.Owner="{Binding (ls:TooltipExtender.Owner), ElementName=BoostHolder}">
                                    <ls:LSTooltip.Style>
                                        <Style TargetType="ls:LSTooltip" BasedOn="{StaticResource {x:Type ls:LSTooltip}}">
                                            <Setter Property="Content" Value="{Binding Path=DataContext.SourceVM, ElementName=BoostHolder}"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Path=DataContext.SourceVM, ElementName=BoostHolder, Converter={StaticResource NullToBoolFalseConverter}, FallbackValue=False}" Value="False">
                                                    <Setter Property="Content" Value="{Binding DataContext, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ls:LSTooltip.Style>
                                </ls:LSTooltip>
                            </ContentControl.ToolTip>
                            <Grid Height="{StaticResource BoostContentHeight}" Width="{StaticResource BoostContentWidth}">
                                <Image x:Name="AdvantageIcon" VerticalAlignment="Top" Height="48" Width="64"/>
                                <Image x:Name="img" Stretch="Uniform" Width="140" Source="{StaticResource SituationalIcon}"/>
                                <Rectangle x:Name="SourceImage" Visibility="Hidden" Width="{StaticResource BoostIconWidth}" Height="{StaticResource BoostIconHeight}" Stretch="Uniform" Margin="0,0,0,20"/>
                                <TextBlock x:Name="desc" Text="{Binding Description}" Style="{StaticResource BonusNameTxtStyle}" VerticalAlignment="Bottom" HorizontalAlignment="Center"/>
                            </Grid>
                        </ContentControl>
                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{Binding AdvantageType}" Value="Advantage">
                                <Setter TargetName="AdvantageIcon" Property="Source" Value="{StaticResource IconAdvantage}" />
                                <Setter TargetName="desc" Property="Foreground" Value="{StaticResource LS_bonusTxtColor}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding AdvantageType}" Value="Disadvantage">
                                <Setter TargetName="AdvantageIcon" Property="Source" Value="{StaticResource IconDisadvantage}"/>
                                <Setter TargetName="desc" Property="Foreground" Value="{StaticResource LS_alertTxtColor}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Description}" Value="">
                                <Setter TargetName="desc" Property="Text" Value="{Binding Source=h7c258c4fg5467g48e5ga704g2ccd2e80dfe6, Converter={StaticResource TranslatedStringConverter}, Mode=OneWay}"/>
                            </DataTrigger>

                            <DataTrigger Binding="{Binding TagReason, Converter={StaticResource NullToBoolFalseConverter}}" Value="True">
                                <Setter TargetName="desc" Property="Text" Value="{Binding TagReason.Name}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding SourceVM,Converter={StaticResource NullToBoolFalseConverter}}" Value="True">
                                <Setter TargetName="img" Property="Visibility" Value="Collapsed" />
                                <Setter TargetName="SourceImage" Property="Visibility" Value="Visible" />
                                <Setter TargetName="SourceImage" Property="Fill" Value="{Binding SourceVM.Icon}" />
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                    <DataTemplate DataType="{x:Type ls:VMBoost}">
                        <ContentControl x:Name="BoostHolder" ToolTipService.ShowOnDisabled="True" ToolTipService.IsEnabled="True"  ToolTipService.Placement="Right" ToolTipService.PlacementTarget="{Binding ElementName=ContentHolder}">
                            <ContentControl.ToolTip>
                                <ls:LSTooltip PlayerId="{Binding Path=DataContext.CurrentPlayer.PlayerId, ElementName=ActiveRoll}" Content="{Binding Path=DataContext.SourceVM, ElementName=BoostHolder}" ls:TooltipExtender.Owner="{Binding (ls:TooltipExtender.Owner), ElementName=BoostHolder}"/>
                            </ContentControl.ToolTip>
                            <Grid x:Name="ContentHolder" Height="{StaticResource BoostContentHeight}" Width="{StaticResource BoostContentWidth}" Background="Transparent" IsHitTestVisible="False">
                                <Image x:Name="img" Stretch="Uniform" Tag="UI_HUD_DiceRoll_BonusType_Default" Margin="40,0,40,20" Visibility="Collapsed" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                                <Control x:Name="die" Template="{StaticResource DiceImage}" IsHitTestVisible="False" Visibility="Collapsed" Margin="0,-32,0,0" VerticalAlignment="Center" HorizontalAlignment="Center"/>

                                <TextBlock x:Name="value" VerticalAlignment="Top" Text="{Binding Path=Value, StringFormat={}{0:+#;-#;+0}}" FontSize="{StaticResource IntermediateFontSize}" Style="{StaticResource BonusValueTxtStyle}" HorizontalAlignment="Center"/>
                                <Rectangle x:Name="SourceImage" Visibility="Hidden" Width="{StaticResource BoostIconWidth}" Height="{StaticResource BoostIconHeight}" Stretch="Uniform" Margin="0,0,0,20"/>
                                <TextBlock x:Name="label"  VerticalAlignment="Bottom" Style="{StaticResource BonusNameTxtStyle}" >
                                    <TextBlock.Text>
                                        <MultiBinding StringFormat="{}{0} {1}">
                                            <Binding Path="Name"/>
                                            <Binding Path="AdditionalValue"/>
                                        </MultiBinding>
                                    </TextBlock.Text>
                                </TextBlock>


                                <b:Interaction.Triggers>
                                    <b:DataTrigger Binding="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType=ContentControl}}" Value="BlinkHl">
                                        <b:InvokeCommandAction Command="{Binding DataContext.PlaySoundEventOnElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                            <b:InvokeCommandAction.CommandParameter>
                                                <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                                    <Binding Mode="OneWay" ElementName="img" />
                                                    <Binding Source="UI_HUD_DiceRoll_Bonus_Appear"/>
                                                </MultiBinding>
                                            </b:InvokeCommandAction.CommandParameter>
                                        </b:InvokeCommandAction>
                                        <b:InvokeCommandAction Command="{Binding DataContext.PlaySoundEventOnElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                            <b:InvokeCommandAction.CommandParameter>
                                                <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                                    <Binding Mode="OneWay" ElementName="img" />
                                                    <Binding Path="Tag" ElementName="img"/>
                                                </MultiBinding>
                                            </b:InvokeCommandAction.CommandParameter>
                                        </b:InvokeCommandAction>
                                    </b:DataTrigger>
                                </b:Interaction.Triggers>
                            </Grid>
                        </ContentControl>
                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{Binding BoostType}" Value="RollBonus">
                                <Setter TargetName="SourceImage" Property="Visibility" Value="Visible" />
                                <Setter TargetName="SourceImage" Property="Fill" Value="{Binding SourceVM.Icon}" />
                                <Setter TargetName="die" Property="Visibility" Value="{Binding SourceVM.Icon, Converter={StaticResource NullToVisibleConverter}}" />
                            </DataTrigger>

                            <DataTrigger Binding="{Binding BoostType}" Value="Ability">
                                <Setter TargetName="img" Property="Visibility" Value="Visible" />
                                <Setter TargetName="img" Property="Style" Value="{StaticResource AbilityIconStatStyle}" />
                                <Setter TargetName="img" Property="Tag" Value="UI_HUD_DiceRoll_BonusType_Ability" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding SourceType}" Value="Item">
                                <Setter TargetName="img" Property="Tag" Value="UI_HUD_DiceRoll_BonusType_Equipment" />
                                <Setter TargetName="SourceImage" Property="Visibility" Value="Visible" />
                                <Setter TargetName="SourceImage" Property="Fill" Value="{Binding SourceVM.Icon}" />
                                <Setter TargetName="die" Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding SourceType}" Value="Status">
                                <Setter TargetName="img" Property="Tag" Value="UI_HUD_DiceRoll_BonusType_Status" />
                                <Setter TargetName="SourceImage" Property="Visibility" Value="Visible" />
                                <Setter TargetName="SourceImage" Property="Fill" Value="{Binding SourceVM.Icon}" />
                                <Setter TargetName="die" Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding SourceType}" Value="Passive">
                                <Setter TargetName="img" Property="Tag" Value="UI_HUD_DiceRoll_BonusType_Feature" />
                            </DataTrigger>

                            <DataTrigger Binding="{Binding AdditionalValue}" Value="0">
                                <Setter TargetName="label" Property="Text" Value="{Binding Name}" />
                            </DataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding BoostType}" Value="RollBonus"/>
                                    <Condition Binding="{Binding DiceTypeSet.Amount, Converter={StaticResource GreaterThanConverter}, ConverterParameter='0'}" Value="True"/>
                                </MultiDataTrigger.Conditions>
                                <Setter TargetName="value" Property="Text" Value="{Binding Path=DiceTypeSet.Str, StringFormat='{}+{0}'}" />
                            </MultiDataTrigger>

                            <DataTrigger Binding="{Binding BoostType}" Value="ProficiencyBonus">
                                <Setter TargetName="label" Property="Text" >
                                    <Setter.Value>
                                        <MultiBinding StringFormat="{}{0} {1}">
                                            <Binding Path="Name"/>
                                            <Binding Source="h613ff7ddg32f4g43cagabd9g158fd1d7a4ec" Converter="{StaticResource TranslatedStringConverter}" Mode="OneWay"/>
                                        </MultiBinding>
                                    </Setter.Value>
                                </Setter>

                                <Setter TargetName="img" Property="Visibility" Value="Visible" />
                                <Setter TargetName="img" Property="Source" Value="pack://application:,,,/Core;component/Assets/AbilityIcons/Proficiency.png" />
                            </DataTrigger>

                            <DataTrigger Binding="{Binding BoostType}" Value="ExpertiseBonus">
                                <Setter TargetName="label" Property="Text" >
                                    <Setter.Value>
                                        <MultiBinding StringFormat="{}{0} {1}">
                                            <Binding Path="Name"/>
                                            <Binding Source="h62318286g57b2g4dfeg9ecag827942dd85f7" Converter="{StaticResource TranslatedStringConverter}" Mode="OneWay"/>
                                        </MultiBinding>
                                    </Setter.Value>
                                </Setter>

                                <Setter TargetName="img" Property="Visibility" Value="Visible" />
                                <Setter TargetName="img" Property="Source" Value="pack://application:,,,/Core;component/Assets/AbilityIcons/Proficiency.png" />
                            </DataTrigger>

                        </DataTemplate.Triggers>
                    </DataTemplate>
                </ResourceDictionary>
            </ControlTemplate.Resources>


            <Grid x:Name="Root" ls:TooltipExtender.Owner="{Binding CurrentPlayer.SelectedCharacter}" ls:AttachedProperties.InheritedCharacter="{Binding CurrentPlayer.SelectedCharacter}">
                <Grid.Resources>
                    <Style x:Key="boostmodlistStyle" TargetType="ListBox">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="ListBox">
                                    <ItemsPresenter/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="ItemsPanel">
                            <Setter.Value>
                                <ItemsPanelTemplate>
                                    <VirtualizingStackPanel Orientation="Horizontal"/>
                                </ItemsPanelTemplate>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="ItemContainerStyle">
                            <Setter.Value>
                                <Style TargetType="ListBoxItem" >
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Setter Property="Focusable" Value="True"/>
                                    <Setter Property="ls:MoveFocus.Focusable" Value="True"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="ListBoxItem">
                                                <ControlTemplate.Resources>
                                                    <ImageSource x:Key="AddArrowImage">pack://application:,,,/Core;component/Assets/ActiveRoll/addArrow.png</ImageSource>
                                                    <ImageSource x:Key="BonusBoxImage">pack://application:,,,/Core;component/Assets/ActiveRoll_c/c_activeRoll_bonusBox_extra_d.png</ImageSource>
                                                    <ImageSource x:Key="SpellSubSelectIndicatorImage">pack://application:,,,/Core;component/Assets/BottomBar/ico_spellSubSelectIndicator.png</ImageSource>
                                                </ControlTemplate.Resources>
                                                <Grid>
                                                    <Image x:Name="bgImgDouble" Visibility="{Binding BoostModifier.Count, Converter={StaticResource CountToVisibilityConverter}}" Source="{StaticResource BonusBoxImage}" Stretch="None" VerticalAlignment="Top" Margin="0,50,0,0"/>
                                                    <Image x:Name="bgImg" Source="{StaticResource BonusBoxImage}" Stretch="None" VerticalAlignment="Top" Margin="0,56,0,0"/>
                                                    <Grid Margin="0,80" VerticalAlignment="Top" >
                                                        <Viewbox VerticalAlignment="Top" HorizontalAlignment="Center" Margin="0,0,0,20" StretchDirection="DownOnly" Width="260">
                                                            <TextBlock x:Name="BonusTxt" Style="{StaticResource BonusValueTxtStyle}">
                                                                <TextBlock.Tag>
                                                                    <MultiBinding Converter="{StaticResource EqualConverter}">
                                                                        <Binding Path="MinBonusValue"/>
                                                                        <Binding Path="MaxBonusValue"/>
                                                                    </MultiBinding>
                                                                </TextBlock.Tag>
                                                                <TextBlock.Text>
                                                                    <MultiBinding StringFormat="{}{0}...{1}">
                                                                        <Binding Path="MinBonusValue" StringFormat="{}{0:+#;-#;+0}"/>
                                                                        <Binding Path="MaxBonusValue"/>
                                                                    </MultiBinding>
                                                                </TextBlock.Text>
                                                            </TextBlock>
                                                        </Viewbox>
                                                        <ContentPresenter Content="{Binding BoostModifier}"/>
                                                        <Image x:Name="ContainerImage" Source="{StaticResource SpellSubSelectIndicatorImage}" Stretch="None" Margin="56,0,0,56" Visibility="Collapsed"/>

                                                        <b:Interaction.Triggers>
                                                            <b:DataTrigger Binding="{Binding (ls:MoveFocus.IsFocused), RelativeSource={RelativeSource AncestorType=ListBoxItem}}" Value="True">
                                                                <ls:LSPlaySound Sound="UI_Shared_Hover" />
                                                            </b:DataTrigger>
                                                            <b:DataTrigger Binding="{Binding IsSelected}" Value="False">
                                                                <b:ChangePropertyAction PropertyName="IsSelected" TargetObject="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="False"/>
                                                            </b:DataTrigger>
                                                        </b:Interaction.Triggers>

                                                    </Grid>

                                                    <ls:LSInputBinding x:Name="InputBinding" 
                                                            PlayerId="{Binding DataContext.CurrentPlayer.PlayerId, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" 
                                                            BoundEvent="UIAccept" 
                                                            Command="{Binding DataContext.AddModifierCommand, RelativeSource={RelativeSource AncestorType=ls:UIWidget}}">
                                                        <ls:LSInputBinding.CommandParameter>
                                                            <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                                                <Binding ElementName="BonusTxt" Mode="OneWay"/>
                                                                <Binding Source="Top"/>
                                                                <Binding Path="DataContext.AddModifierCommand" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                                            </MultiBinding>
                                                        </ls:LSInputBinding.CommandParameter>
                                                        <b:Interaction.Triggers>
                                                            <b:EventTrigger EventName="LSInputBindingReleased">
                                                                <ls:LSPlaySound Sound="UI_Shared_Click" />
                                                            </b:EventTrigger>
                                                            <b:EventTrigger EventName="LSInputBindingPressed">
                                                                <ls:LSPlaySound Sound="UI_HUD_DiceRoll_Bonus_Press" />
                                                                <b:ChangePropertyAction PropertyName="IsSelected" TargetObject="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True"/>
                                                            </b:EventTrigger>
                                                            <b:EventTrigger EventName="LSInputBindingPressed">
                                                                <b:Interaction.Behaviors>
                                                                    <b:ConditionBehavior>
                                                                        <b:ConditionalExpression>
                                                                            <b:ComparisonCondition LeftOperand="{Binding (ItemsControl.AlternationIndex), RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Operator="GreaterThan" RightOperand="0"/>
                                                                        </b:ConditionalExpression>
                                                                    </b:ConditionBehavior>
                                                                </b:Interaction.Behaviors>
                                                                <ls:SetMoveFocusAction TargetName="ActiveRoll" DirectionFocusSourceElement="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" DirectionFocus="Left"/>
                                                            </b:EventTrigger>
                                                            <b:EventTrigger EventName="LSInputBindingPressed">
                                                                <b:Interaction.Behaviors>
                                                                    <b:ConditionBehavior>
                                                                        <b:ConditionalExpression>
                                                                            <b:ComparisonCondition LeftOperand="{Binding (ItemsControl.AlternationIndex), RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Operator="Equal" RightOperand="0"/>
                                                                            <b:ComparisonCondition LeftOperand="{Binding (ItemsControl.AlternationCount), RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Operator="GreaterThanOrEqual" RightOperand="1"/>
                                                                        </b:ConditionalExpression>
                                                                    </b:ConditionBehavior>
                                                                </b:Interaction.Behaviors>
                                                                <ls:SetMoveFocusAction TargetName="ActiveRoll" DirectionFocusSourceElement="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" DirectionFocus="Right"/>
                                                            </b:EventTrigger>
                                                        </b:Interaction.Triggers>
                                                        <ls:LSInputBinding.Style>
                                                            <Style TargetType="ls:LSInputBinding">
                                                                <Setter Property="IsEnabled" Value="False"/>
                                                                <Style.Triggers>
                                                                    <MultiDataTrigger>
                                                                        <MultiDataTrigger.Conditions>
                                                                            <Condition  Value="True">
                                                                                <Condition.Binding>
                                                                                    <MultiBinding Converter="{StaticResource EqualConverter}">
                                                                                        <Binding Path="DataContext.Owner.PlayerCharacterProperties.OwnerUserID" RelativeSource="{RelativeSource Mode=Self}"/>
                                                                                        <Binding Path="DataContext.CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.OwnerUserID" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                                                                    </MultiBinding>
                                                                                </Condition.Binding>
                                                                            </Condition>
                                                                            <Condition Binding="{Binding (ls:MoveFocus.IsFocused), RelativeSource={RelativeSource AncestorType=ListBoxItem}}" Value="True"/>
                                                                        </MultiDataTrigger.Conditions>
                                                                        <Setter Property="IsEnabled" Value="True"/>
                                                                    </MultiDataTrigger>

                                                                </Style.Triggers>
                                                            </Style>
                                                        </ls:LSInputBinding.Style>
                                                    </ls:LSInputBinding>
                                                    <Image x:Name="arrowImg" Source="{StaticResource AddArrowImage}" VerticalAlignment="Top" Visibility="Collapsed" Stretch="None"/>

                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <DataTrigger Binding="{Binding ElementName=BonusTxt, Path=Tag}" Value="True">
                                                        <Setter TargetName="BonusTxt" Property="Text" >
                                                            <Setter.Value>
                                                                <MultiBinding StringFormat="{}{0:+#;-#;+0}">
                                                                    <Binding Path="MinBonusValue" />
                                                                </MultiBinding>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding IsAdvantage}" Value="True">
                                                        <Setter TargetName="BonusTxt" Property="Text" Value="{Binding Source=he770672cgd25bg4ec8g8bb6g6745e6e7576f  , Converter={StaticResource TranslatedStringConverter}, Mode=OneWay}"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding DiceTypeSet.Amount,Converter={StaticResource GreaterThanConverter},ConverterParameter=0}" Value="True">
                                                        <Setter TargetName="BonusTxt" Property="Text" Value="{Binding DiceTypeSet.Str, StringFormat='{}+{0}'}"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding BoostModifier.IsContainer, FallbackValue=False}" Value="True">
                                                        <Setter TargetName="ContainerImage" Property="Visibility" Value="Visible"/>
                                                    </DataTrigger>
                                                    <Trigger Property="ls:MoveFocus.IsFocused" Value="True">
                                                        <Setter Property="Source" Value="pack://application:,,,/Core;component/Assets/ActiveRoll_c/c_activeRoll_bonusBox_extra_h.png" TargetName="bgImg"/>
                                                        <Setter Property="Visibility" Value="Visible" TargetName="arrowImg"/>
                                                        <Setter TargetName="InputBinding" Property="IsEnabled" Value="True"/>
                                                    </Trigger>
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Value="False">
                                                                <Condition.Binding>
                                                                    <MultiBinding Converter="{StaticResource EqualConverter}">
                                                                        <Binding Path="DataContext.Owner.PlayerCharacterProperties.OwnerUserID" RelativeSource="{RelativeSource Mode=Self}"/>
                                                                        <Binding Path="DataContext.CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.OwnerUserID" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                                                    </MultiBinding>
                                                                </Condition.Binding>
                                                            </Condition>
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter Property="Visibility" Value="Collapsed" TargetName="arrowImg"/>
                                                    </MultiDataTrigger>

                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Value="True">
                                                                <Condition.Binding>
                                                                    <MultiBinding Converter="{StaticResource EqualConverter}">
                                                                        <Binding Path="DataContext.Owner.PlayerCharacterProperties.OwnerUserID" RelativeSource="{RelativeSource Mode=Self}"/>
                                                                        <Binding Path="DataContext.CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.OwnerUserID" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                                                    </MultiBinding>
                                                                </Condition.Binding>
                                                            </Condition>
                                                            <Condition Binding="{Binding (ls:MoveFocus.IsFocused), RelativeSource={RelativeSource Self}}" Value="True"/>
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter TargetName="InputBinding" Property="IsEnabled" Value="True"/>
                                                    </MultiDataTrigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsSelected}" Value="True">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                            <Setter Property="Focusable" Value="False"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Setter.Value>
                        </Setter>
                    </Style>

                    <!--MiniPlayerPortraits Representation -->
                    <DataTemplate x:Key="ActiveRoll.PlayerPortraits" DataType="ls:Character">
                        <DataTemplate.Resources>
                            <ImageSource x:Key="CharacterTrayImage">pack://application:,,,/Core;component/Assets/ActiveRoll_c/c_activeRoll_characterTray.png</ImageSource>
                        </DataTemplate.Resources>
                        <Grid x:Name="PortraitRoot" Height="460" Visibility="{Binding FilteredItems.Count, ElementName=UnselectedModifiers, Converter={StaticResource CountToVisibilityConverter}}">
                            <b:Interaction.Behaviors>
                                <ls:CollectionFilterBehavior x:Name="UnselectedModifiers" ItemsSource="{Binding BoostModifierList}" Predicate="{Binding DataContext.UnselectedModifiersPredicate, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                            </b:Interaction.Behaviors>

                            <ls:LSNineSliceImage ImageSource="{StaticResource CharacterTrayImage}" Slices="44,0,44,0" Margin="10,0,10,0" IconWidth="100" Height="96" VerticalAlignment="Bottom" MinWidth="240">
                                <Ellipse Fill="{Binding Owner.Icon}" HorizontalAlignment="Center" VerticalAlignment="Center" Width="64" Height="64"/>
                            </ls:LSNineSliceImage>
                            <ListBox x:Name="boostmodlist" ItemsSource="{Binding BoostModifierList}" HorizontalAlignment="Center" VerticalAlignment="Top" Style="{StaticResource boostmodlistStyle}" AlternationCount="{Binding BoostModifierList.Count}"/>

                            <b:Interaction.Triggers>
                                <b:DataTrigger Binding="{Binding Visibility, ElementName=PortraitRoot}" Value="Collapsed">
                                    <ls:SetMoveFocusAction TargetName="ActiveRoll" FocusElement="{Binding RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                                </b:DataTrigger>
                            </b:Interaction.Triggers>
                        </Grid>

                        <DataTemplate.Triggers>
                            <DataTrigger Value="False">
                                <DataTrigger.Binding>
                                    <MultiBinding Converter="{StaticResource EqualConverter}">
                                        <Binding Path="DataContext.Owner.PlayerCharacterProperties.OwnerUserID" RelativeSource="{RelativeSource Mode=Self}"/>
                                        <Binding Path="DataContext.CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.OwnerUserID" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                    </MultiBinding>
                                </DataTrigger.Binding>
                                <Setter Property="Opacity" Value="0.75"/>
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </Grid.Resources>

                <b:Interaction.Triggers>
                    <b:DataTrigger Binding="{Binding ElementName=DiceSelector, Path=IsVisible}" Value="True">
                        <ls:SetMoveFocusAction TargetName="ActiveRoll" FocusElement="{Binding ElementName=DiceStyleList}" />
                    </b:DataTrigger>
                    <b:DataTrigger Binding="{Binding ElementName=DiceSelector, Path=IsVisible}" Value="False">
                        <ls:SetMoveFocusAction TargetName="ActiveRoll" />
                    </b:DataTrigger>
                    <b:EventTrigger EventName="GotKeyboardFocus">
                        <b:InvokeCommandAction Command="{Binding ShowTooltipOnUIElementCommand, ElementName=ActiveRoll}" CommandParameter="{Binding Path=FocusedElement, ElementName=ActiveRoll}"/>
                    </b:EventTrigger>
                    <b:DataTrigger Binding="{Binding HasInputEnabled, ElementName=ActiveRoll}" Value="True">
                        <b:InvokeCommandAction Command="{Binding ShowTooltipOnUIElementCommand, ElementName=ActiveRoll}" CommandParameter="{Binding Path=FocusedElement, ElementName=ActiveRoll}"/>
                    </b:DataTrigger>

                    <b:PropertyChangedTrigger Binding="{Binding Path=FocusedElement, ElementName=ActiveRoll}">
                        <ls:LSPlaySound Sound="UI_Shared_Hover" />
                    </b:PropertyChangedTrigger>

                    <!--SOUND TRIGGERS FOR RESULT-->
                    <b:DataTrigger Binding="{Binding RollState}" Value="ResultReady" >
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding Success}" Operator="Equal" RightOperand="True"/>
                                    <b:ComparisonCondition LeftOperand="{Binding SkippedRoll}" Operator="Equal" RightOperand="False"/>
                                    <b:ComparisonCondition LeftOperand="{Binding FinalResult}" Operator="NotEqual" RightOperand="20"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <ls:LSPlaySound Sound="UI_HUD_DiceRoll_Result_Success"/>
                    </b:DataTrigger>

                    <b:DataTrigger Binding="{Binding RollState}" Value="ResultReady" >
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding Success}" Operator="Equal" RightOperand="True"/>
                                    <b:ComparisonCondition LeftOperand="{Binding SkippedRoll}" Operator="Equal" RightOperand="False"/>
                                    <b:ComparisonCondition LeftOperand="{Binding FinalResult}" Operator="Equal" RightOperand="20"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <ls:LSPlaySound Sound="UI_HUD_DiceRoll_Result_20"/>
                    </b:DataTrigger>

                    <b:DataTrigger Binding="{Binding RollState}" Value="ResultReady" >
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding Success}" Operator="Equal" RightOperand="False"/>
                                    <b:ComparisonCondition LeftOperand="{Binding SkippedRoll}" Operator="Equal" RightOperand="False"/>
                                    <b:ComparisonCondition LeftOperand="{Binding FinalResult}" Operator="NotEqual" RightOperand="1"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <ls:LSPlaySound Sound="UI_HUD_DiceRoll_Result_Fail"/>
                    </b:DataTrigger>

                    <b:DataTrigger Binding="{Binding RollState}" Value="ResultReady" >
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding Success}" Operator="Equal" RightOperand="False"/>
                                    <b:ComparisonCondition LeftOperand="{Binding SkippedRoll}" Operator="Equal" RightOperand="False"/>
                                    <b:ComparisonCondition LeftOperand="{Binding FinalResult}" Operator="Equal" RightOperand="1"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <ls:LSPlaySound Sound="UI_HUD_DiceRoll_Result_1"/>
                    </b:DataTrigger>

                    <!--SKIPPED-->
                    <b:DataTrigger Binding="{Binding RollState}" Value="ResultReady" >
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding Success}" Operator="Equal" RightOperand="True"/>
                                    <b:ComparisonCondition LeftOperand="{Binding SkippedRoll}" Operator="Equal" RightOperand="True"/>
                                    <b:ComparisonCondition LeftOperand="{Binding FinalResult}" Operator="NotEqual" RightOperand="20"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <ls:LSPlaySound Sound="UI_HUD_DiceRoll_Result_Success_Skipped"/>
                    </b:DataTrigger>

                    <b:DataTrigger Binding="{Binding RollState}" Value="ResultReady" >
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding Success}" Operator="Equal" RightOperand="True"/>
                                    <b:ComparisonCondition LeftOperand="{Binding SkippedRoll}" Operator="Equal" RightOperand="True"/>
                                    <b:ComparisonCondition LeftOperand="{Binding FinalResult}" Operator="Equal" RightOperand="20"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <ls:LSPlaySound Sound="UI_HUD_DiceRoll_Result_20_Skipped"/>
                    </b:DataTrigger>

                    <b:DataTrigger Binding="{Binding RollState}" Value="ResultReady" >
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding Success}" Operator="Equal" RightOperand="False"/>
                                    <b:ComparisonCondition LeftOperand="{Binding SkippedRoll}" Operator="Equal" RightOperand="True"/>
                                    <b:ComparisonCondition LeftOperand="{Binding FinalResult}" Operator="NotEqual" RightOperand="1"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <ls:LSPlaySound Sound="UI_HUD_DiceRoll_Result_Fail_Skipped"/>
                    </b:DataTrigger>

                    <b:DataTrigger Binding="{Binding RollState}" Value="ResultReady" >
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding Success}" Operator="Equal" RightOperand="False"/>
                                    <b:ComparisonCondition LeftOperand="{Binding SkippedRoll}" Operator="Equal" RightOperand="True"/>
                                    <b:ComparisonCondition LeftOperand="{Binding FinalResult}" Operator="Equal" RightOperand="1"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <ls:LSPlaySound Sound="UI_HUD_DiceRoll_Result_1_Skipped"/>
                    </b:DataTrigger>
                </b:Interaction.Triggers>

                <Rectangle x:Name="BackgroundGradient" Opacity="0.6" HorizontalAlignment="Center" Width="1200">
                    <Rectangle.Resources>
                        <KeyTime x:Key="SimpleFadeInTime">0:0:10</KeyTime>
                    </Rectangle.Resources>
                    <Rectangle.Fill>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                            <GradientStop Color="#00000000" Offset="0.0" />
                            <GradientStop Color="#90000000" Offset="0.4" />
                            <GradientStop Color="#90000000" Offset="0.6" />
                            <GradientStop Color="#00000000" Offset="1.0" />
                        </LinearGradientBrush>
                    </Rectangle.Fill>
                    <Rectangle.Triggers>
                        <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                            <BeginStoryboard Storyboard="{StaticResource SimpleFadeIn}"/>
                        </EventTrigger>
                    </Rectangle.Triggers>
                </Rectangle>


                <Grid x:Name="MainRollPanel" IsEnabled="{Binding ElementName=DiceSelector, Path=IsVisible, Converter={StaticResource InvertBoolConverter}}" ls:MoveFocus.IsMoveFocusScope="True">
                    <Grid x:Name="headerSection" VerticalAlignment="Top" Height="200" Margin="120,48,120,0">
                        <Image Source="{StaticResource DialogueSeparatorImage}" Margin="0,0,0,-24" Stretch="None" VerticalAlignment="Bottom"/>

                        <Viewbox StretchDirection="DownOnly" Stretch="Uniform" Margin="0,12,0,-12">
                            <TextBlock x:Name="DialogueLine" Style="{StaticResource ActiveRollTextBlock}" Foreground="{StaticResource Dialogue.Answer.Normal}" ls:TextBlockFormatter.SourceText="{Binding SelectedDialogueLine}" FontSize="{StaticResource ScaledTitleFontSize}" Visibility="{Binding SelectedDialogueLine, Converter={StaticResource NullToCollapsedConverter}, ConverterParameter='EmptyString'}" VerticalAlignment="Center" />
                        </Viewbox>

                        <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="{Binding Visibility, ElementName=DialogueLine, Converter={StaticResource InvertVisibilityConverter}}">
                            <TextBlock Text="{Binding SkillOrAbility}" FontSize="{StaticResource ScaledTitleFontSize}" Style="{StaticResource ActiveRollTextBlock}"/>
                            <TextBlock Text="{Binding AbilityCheckText}" Style="{StaticResource ActiveRollTextBlock}" FontSize="{StaticResource ScaledDefaultFontSize}" Foreground="{StaticResource LS_accent75TxtColor}" Visibility="{Binding IsPureAbilityRoll, Converter={StaticResource BoolToHiddenConverter}}"/>
                        </StackPanel>
                    </Grid>

                    <Image Source="{StaticResource ActiveRollFrameImage}" Margin="0,282,0,0" VerticalAlignment="Top" Stretch="None">
                        <Image.Resources>
                            <KeyTime x:Key="SimpleFadeInTime">0:0:10</KeyTime>
                        </Image.Resources>
                        <Image.Triggers>
                            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                <BeginStoryboard Storyboard="{StaticResource SimpleFadeIn}"/>
                            </EventTrigger>
                        </Image.Triggers>
                    </Image>

                    <Control x:Name="Lock" Template="{StaticResource LockTemplate}" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,724,0,0"/>

                    <Control x:Name="ResultAnimation" Style="{StaticResource ResultControlStyle}" IsHitTestVisible="False">
                        <Control.RenderTransform>
                            <TranslateTransform Y="-60"/>
                        </Control.RenderTransform>
                    </Control>
                    <Grid x:Name="rollSection" Margin="0,0,0,322">
                        <Grid.Resources>
                            <Style x:Key="TextElementHolderStyle" TargetType="Grid" >
                                <Setter Property="Height" Value="860"/>
                                <Setter Property="Margin" Value="0,368,0,0"/>
                            </Style>

                            <Style x:Key="RollBonusStyle" TargetType="Control" >
                                <Setter Property="Margin" Value="0,0,0,10"/>
                            </Style>
                            <Style x:Key="TargetTextHolderStyle" TargetType="StackPanel" >
                                <Setter Property="Height" Value="580"/>
                                <Setter Property="Margin" Value="0,40,0,0"/>
                            </Style>

                            <Style x:Key="textBlockTargetStyle" TargetType="TextBlock" BasedOn="{StaticResource ActiveRollTextBlock}" >
                                <Setter Property="FontSize" Value="{StaticResource MediumFontSize}"/>
                                <Setter Property="LineHeight" Value="{StaticResource SmallFontSizeLineHeight}"/>
                                <Setter Property="LineStackingStrategy" Value="BlockLineHeight"/>
                            </Style>

                            <Style x:Key="targetScoreAnimationStyle" TargetType="Grid" >
                                <Setter Property="Margin" Value="0,6,0,0"/>
                            </Style>

                            <Style x:Key="DCTextStyle" TargetType="TextBlock" BasedOn="{StaticResource DCTextStyleBase}">
                                <Setter Property="FontSize" Value="{StaticResource GiganticFontSize}"/>
                            </Style>

                            <Style x:Key="DieHolderStyle" TargetType="Grid" BasedOn="{StaticResource BaseDieHolderStyle}">
                                <Setter Property="VerticalAlignment" Value="Top"/>
                                <Setter Property="Margin" Value="0,680,0,0"/>
                            </Style>

                        </Grid.Resources>

                        <Control x:Name="DieControlHolder" Template="{StaticResource DieControlHolderTemplate}"/>

                        <!-- Roll Prompt -->
                        <Grid IsHitTestVisible="False" x:Name="prompt" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,160,0,0" >
                            <Image Source="{StaticResource StartRollPromptFrameImage}" Stretch="None"/>
                            <TextBlock TextAlignment="Center" VerticalAlignment="Center" FontSize="{StaticResource IntermediateFontSize}" Foreground="{StaticResource LS_specialTxtColor}" Margin="0,-4,0,4">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source=h7bb9bbfbg5fc0g4728g9947g9a9e6c862e93, Converter={StaticResource TranslatedStringConverter}, Mode=OneWay}"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding CanRespondToCommands}" Value="False" >
                                                <Setter Property="ls:TextBlockFormatter.SourceText">
                                                    <Setter.Value>
                                                        <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                                            <Binding Source="hdd2befabg0819g4729g9c0egda41572787ee"/>
                                                            <Binding Path="DataContext.SourceObject.Name" RelativeSource="{RelativeSource Mode=Self}"/>
                                                        </MultiBinding>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>

                            <ls:LSButton x:Name="rollTheDiceBtn" 
                                     VerticalAlignment="Bottom" 
                                     HorizontalAlignment="Center" 
                                     ContentTemplate="{StaticResource ControllerButtonHintImageOnly}"
                                     Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIRequestTrade'}"
                                     BoundEvent="UIMessageBoxY"
                                     Command="{Binding UserTriggeredNextPhaseCommand}"
					                     CommandParameter="{StaticResource TrueValue}"
                                         Visibility="{Binding CanRespondToCommands, Converter={StaticResource BoolToVisibleConverter}}">
                                <ls:LSButton.Style>
                                    <Style TargetType="ls:LSButton" BasedOn="{StaticResource {x:Type ls:LSButton}}">
                                        <Setter Property="IsEnabled" Value="False"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RollState}" Value="WaitForStart">
                                                <Setter Property="IsEnabled" Value="True"/>
                                            </DataTrigger>

                                            <DataTrigger Binding="{Binding RollState}" Value="WaitForReRoll">
                                                <Setter Property="IsEnabled" Value="True"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ls:LSButton.Style>
                            </ls:LSButton>

                            <ls:LSInputBinding x:Name="SkipRollInput" BoundEvent="UIAccept" Command="{Binding UserTriggeredNextPhaseCommand}" CommandParameter="{StaticResource FalseValue}" IsEnabled="False"/>
                            <ls:LSInputBinding x:Name="SkipRollInputRollTheDiceInput" BoundEvent="UIMessageBoxY" Command="{Binding UserTriggeredNextPhaseCommand}" CommandParameter="{StaticResource FalseValue}" IsEnabled="False"/>

                            <Grid.Style>
                                <Style TargetType="Grid">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RollState}" Value="IntroductionAnimation" >
                                            <Setter Property="Visibility" Value="Visible" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding RollState}" Value="WaitForStart" >
                                            <Setter Property="Visibility" Value="Visible" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding RollState}" Value="WaitForReRoll" >
                                            <Setter Property="Visibility" Value="Visible" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Grid.Style>
                        </Grid>
                    </Grid>

                    <!-- Success and Fail Buttons and Retries -->
                    <Grid x:Name="buttonGroup" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,1340,0,0" Panel.ZIndex="3">
                        <Grid.Style>
                            <Style TargetType="Grid">
                                <Setter Property="Visibility" Value="Collapsed" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding RollState}" Value="ResultReady" >
                                        <Setter Property="Visibility" Value="Visible" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Style>
                        <b:Interaction.Triggers>
                            <b:DataTrigger Binding="{Binding RollState}" Value="ResultReady" >
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding Success}" Operator="Equal" RightOperand="False"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>
                                <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource FailButtonAnimation}" />
                                <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource toplist.FadeOut}" />
                            </b:DataTrigger>

                            <b:DataTrigger Binding="{Binding RollState}" Value="StartRoll" >
                                <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource BoostList.FadeOut}" />
                                <b:InvokeCommandAction Command="{Binding HideTooltipOnUIElementCommand, ElementName=ActiveRoll}"/>
                            </b:DataTrigger>

                            <b:PropertyChangedTrigger Binding="{Binding CurrentPlayer.SelectedCharacter}">
                                <b:InvokeCommandAction Command="{Binding UpdateCanRespondTo}"/>
                            </b:PropertyChangedTrigger>

                            <b:DataTrigger Binding="{Binding RollState}" Value="ResultReady" >
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding Success}" Operator="Equal" RightOperand="True"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>
                                <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource SuccessButtonAnimation}" />
                                <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource toplist.FadeOut}" />
                            </b:DataTrigger>

                            <b:DataTrigger Binding="{Binding RollState}" Value="IntroductionAnimation" >
                                <b:ChangePropertyAction TargetName="ActiveRoll" PropertyName="Tag" Value="" />
                                <b:ChangePropertyAction TargetName="AnimTargetPlaceHolder" PropertyName="Tag" Value="0" />
                                <b:ChangePropertyAction TargetName="FailButtons" PropertyName="Visibility" Value="Collapsed" />
                                <b:ControlStoryboardAction ControlStoryboardOption="Stop" Storyboard="{StaticResource toplist.FadeOut}" />
                                <b:ControlStoryboardAction ControlStoryboardOption="Stop" Storyboard="{StaticResource FailButtonAnimation}" />
                                <b:ControlStoryboardAction ControlStoryboardOption="Stop" Storyboard="{StaticResource BonussesTitle.FadeOut}" />
                                <b:ControlStoryboardAction ControlStoryboardOption="Stop" Storyboard="{StaticResource BoostList.FadeOut}" />
                            </b:DataTrigger>

                            <b:DataTrigger Binding="{Binding RollState}" Value="StartRoll">
                                <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource BonussesTitle.FadeOut}" />
                            </b:DataTrigger>
                            <!---->
                        </b:Interaction.Triggers>

                        <StackPanel x:Name="FailButtons" Visibility="Collapsed" Orientation="Vertical" RenderTransformOrigin="0.5,0.5" IsEnabled="False" >
                            <StackPanel.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform Y="0"/>
                                </TransformGroup>
                            </StackPanel.RenderTransform>
                            <Grid x:Name="InspirationRerollHolder" Visibility="Collapsed" >
                                <Grid x:Name="RerollPaneBg" Visibility="Hidden" Opacity="0" >
                                    <Grid.Resources>
                                        <ImageSource x:Key="RerollFrameImage">pack://application:,,,/Core;component/Assets/ActiveRoll_c/c_rerollFrame.png</ImageSource>
                                    </Grid.Resources>
                                    <Grid.RenderTransform>
                                        <TranslateTransform Y="0"/>
                                    </Grid.RenderTransform>
                                    <Image Source="{StaticResource RerollFrameImage}" Stretch="None" Margin="-10,0,0,0"/>
                                </Grid>
                                <Grid x:Name="RerollPaneContent" Opacity="0" Visibility="Hidden">
                                    <Grid.RenderTransform>
                                        <TranslateTransform Y="0"/>
                                    </Grid.RenderTransform>
                                    <ls:LSButton x:Name="ReRollBtn" Style="{StaticResource ControllerButton}" 
                                                 DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIAddPoints', Mode=OneWay}" 
                                                 Content="{Binding Converter={StaticResource TranslatedStringConverter}, Source=h62c407a0g5c70g4d88g8510gecdb08a44236}" 
                                                 Command="{Binding DataContext.RollAgainCommand,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" 
                                                 IsEnabled="{Binding DataContext.CanRespondToCommands,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"  
                                                 VerticalAlignment="Top" Margin="-16,90,0,0" SoundID="UI_HUD_ActiveRoll_RollAgain" />
                                    <TextBlock Foreground="{StaticResource LS_baseTxtColor}" FontSize="{StaticResource MediumFontSize}" Margin="0,0,0,30" VerticalAlignment="Bottom" HorizontalAlignment="Center" TextAlignment="Center">
                            <Run Text="{Binding Converter={StaticResource TranslatedStringConverter}, Source=he6adfaa2g81bag42f1g844egb23de6220031, Mode=OneWay}" />
                            <Run Text="{Binding InspirationPoints, Mode=OneWay, StringFormat='({0})'}"/>
                                    </TextBlock>
                                </Grid>
                            </Grid>

                            <StackPanel x:Name="TryAgainHolder" Visibility="Collapsed">
                                <!--Try Again is for actions like pickpocket , it's not an inspiration reroll-->
                                <Grid x:Name="TryAgainPaneBg" Visibility="Hidden" Opacity="0">
                                    <Grid.RenderTransform>
                                        <TranslateTransform Y="0"/>
                                    </Grid.RenderTransform>
                                </Grid>
                                <StackPanel x:Name="TryAgainPaneContent" Opacity="0" Visibility="Hidden">
                                    <StackPanel.RenderTransform>
                                        <TranslateTransform Y="0"/>
                                    </StackPanel.RenderTransform>
                                    <ls:LSButton x:Name="TryAgainBtn" Style="{StaticResource ControllerButton}" 
                                                 DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIRemovePoints'}" 
                                                 Content="{Binding Converter={StaticResource TranslatedStringConverter}, Source=h0ab67992g5f7cg4402gbd1dg07ea74fa5309}" 
                                                 Command="{Binding DataContext.TryAgainCommand,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" 
                                                 Margin="-16,0,0,0" SoundID="UI_HUD_ActiveRoll_RollAgain"/>
                                    <TextBlock Foreground="{StaticResource LS_baseTxtColor}" FontSize="{StaticResource MediumFontSize}" Margin="0,0,0,30" HorizontalAlignment="Center" TextAlignment="Center">
                            <Run Text="{Binding Converter={StaticResource TranslatedStringConverter}, Source=h46fcf911ga536g481fg9384gaabff3bf7720, Mode=OneWay}" />
                            <Run Text="{Binding ContextObjectCount, Converter={StaticResource AddConverter}, ConverterParameter='-1', Mode=OneWay, StringFormat='({0})'}"/>
                                    </TextBlock>
                                </StackPanel>
                            </StackPanel>

                            <Grid x:Name="ContinueBtn">
                                <Grid.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform/>
                                        <TranslateTransform Y="0"/>
                                    </TransformGroup>
                                </Grid.RenderTransform>
                                <Image Source="pack://application:,,,/Core;component/Assets/ActiveRoll_c/c_promptFrame_endCheck.png" Stretch="None" Margin="0,0,0,0"/>
                                <TextBlock x:Name="FailContinuePrompt" Text="{Binding Converter={StaticResource TranslatedStringConverter},Source=h560d086ag3144g4595g9129ge69f0383a226, Mode=OneWay}" Margin="0,50,0,0" FontSize="{StaticResource LargeFontSize}" TextAlignment="Center" HorizontalAlignment="Center" VerticalAlignment="Top" Foreground="{StaticResource LS_extraspecialTxtColor}"/>
                                <ls:LSButton Command="{Binding DataContext.ContinueCommand,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Content="" SoundID="UI_HUD_ActiveRoll_Continue" VerticalAlignment="Bottom" HorizontalAlignment="Center" DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIAccept'}" Margin="0,0,0,90">
                                    <ls:LSButton.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                            <SkewTransform/>
                                            <RotateTransform/>
                                            <TranslateTransform Y="0"/>
                                        </TransformGroup>
                                    </ls:LSButton.RenderTransform>
                                    <ls:LSButton.Style>
                                        <Style TargetType="ls:LSButton" BasedOn="{StaticResource ControllerButton}">
                                            <Setter Property="IsEnabled" Value="False"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding ElementName=FailButtons,Path=Visibility}" Value="Visible">
                                                    <Setter Property="IsEnabled" Value="{Binding CanRespondToCommands}"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ls:LSButton.Style>
                                </ls:LSButton>
                            </Grid>
                        </StackPanel>

                        <Grid x:Name="SuccessButtons" Visibility="Collapsed" Opacity="0">
                            <Grid.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform />
                                </TransformGroup>
                            </Grid.RenderTransform>
                            <Image Source="pack://application:,,,/Core;component/Assets/ActiveRoll_c/c_promptFrame_endCheck.png" Stretch="None" Margin="0,0,0,0"/>
                            <TextBlock x:Name="SuccessContinuePrompt" ls:TextBlockFormatter.SourceText="{Binding Converter={StaticResource TranslatedStringConverter},Source=h560d086ag3144g4595g9129ge69f0383a226, Mode=OneWay}" Margin="0,50,0,0" FontSize="{StaticResource LargeFontSize}" TextAlignment="Center" HorizontalAlignment="Center" VerticalAlignment="Top" Foreground="{StaticResource LS_extraspecialTxtColor}"/>
                            <ls:LSButton Command="{Binding DataContext.ContinueCommand,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Content="" SoundID="UI_HUD_ActiveRoll_Continue" VerticalAlignment="Bottom" HorizontalAlignment="Center" DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIAccept'}" Margin="0,0,0,90">
                                <ls:LSButton.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform/>
                                        <TranslateTransform Y="0"/>
                                    </TransformGroup>
                                </ls:LSButton.RenderTransform>
                                <ls:LSButton.Style>
                                    <Style TargetType="ls:LSButton" BasedOn="{StaticResource ControllerButton}">
                                        <Setter Property="IsEnabled" Value="False"/>
                                        <Style.Triggers>
                                            <MultiDataTrigger >
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding ElementName=SuccessButtons,Path=Visibility}" Value="Visible"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="IsEnabled" Value="{Binding CanRespondToCommands}"/>
                                            </MultiDataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ls:LSButton.Style>
                            </ls:LSButton>
                        </Grid>
                    </Grid>

                    <StackPanel x:Name="ControllerHints" Style="{StaticResource ButtonHint.Container.Center}" Panel.ZIndex="4">
                        <ls:LSButton x:Name="CloseUIBtn" ContentTemplate="{StaticResource ControllerButtonHint}"
                         BoundEvent="UICancel"
                         Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UICancel'}"
                         Tag="{Binding Converter={StaticResource TranslatedStringConverter}, Source=h0d98c8cbg811eg40a5g958dg2552a3f4e350, Mode=OneWay}" 
                         Command="{Binding DataContext.CancelCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                            <ls:LSButton.Style>
                                <Style TargetType="{x:Type ls:LSButton}" BasedOn="{StaticResource {x:Type ls:LSButton}}">
                                    <Style.Setters>
                                        <!-- KELA Collapsed -->
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </Style.Setters>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding DataContext.RollContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="LockPick">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding DataContext.RollContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="DisarmTrap">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding DataContext.RollContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="PickPocket">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding DataContext.RollState, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="WaitForReRoll">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding DataContext.RollState, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="StartRoll">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding DataContext.RollState, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="StopRoll">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding DataContext.RollState, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="ResultReady">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding DataContext.IsTriggeredByScript, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>

                                        <!-- KELA NEW -->
                                        <!-- <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.IsInCamp, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger> -->

                                        <DataTrigger Binding="{Binding Visibility,ElementName=BoostList}" Value="Visible">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ls:LSButton.Style>
                        </ls:LSButton>

                        <ls:LSButton x:Name="HideListBtn" ContentTemplate="{StaticResource ControllerButtonHint}"
                                 BoundEvent="UICancel"
                                 Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UICancel'}"
                                 Tag="{Binding Converter={StaticResource TranslatedStringConverter}, Source=h566c2213g6b06g4c09g912ege16b46f520ba, Mode=OneWay}" 
                                 Visibility="Collapsed">
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="LSButtonPressed" >
                                    <b:ChangePropertyAction TargetName="BoostList" PropertyName="Visibility" Value="Hidden" />
                                    <ls:SetMoveFocusAction TargetName="ActiveRoll" FocusElement="{Binding ElementName=modlist}"/>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                        </ls:LSButton>

                        <ls:LSToggleButton x:Name="DiceModToggle" Tag="{Binding Source=h8cf800dbg79f9g49a8ga65agdb87546d680d, Converter={StaticResource TranslatedStringConverter}}" Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter=UISort}" ContentTemplate="{StaticResource ControllerButtonHint}" BoundEvent="UISort" IsChecked="False" Visibility="Collapsed"/>

                        <ls:LSButton x:Name="ToggleTooltipBtn" ContentTemplate="{StaticResource ControllerButtonHint}" BoundEvent="UIShowInfo"
                         Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIShowInfo'}"
                         Tag="{Binding Converter={StaticResource TranslatedStringConverter}, Source=hf8dd4c2fg97e0g4ccdgac1ag3cd1fe5060ef, Mode=OneWay}" 
                         Command="ls:UIWidget.ToggleTooltipOnUIElementCommand"
                         CommandParameter="{Binding FocusedElement, ElementName=ActiveRoll}" Visibility="Collapsed"/>
                    </StackPanel>

                    <Grid x:Name="BonusModifiers" HorizontalAlignment="Center" VerticalAlignment="Bottom" Panel.ZIndex="2" Height="860" >
                        <Grid.Style>
                            <Style TargetType="Grid">
                                <Setter Property="Visibility" Value="Visible"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding RollState}" Value="ResultReady" >
                                        <Setter Property="Visibility" Value="Hidden"/>
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Style>
                        <Grid.Resources>
                            <Style x:Key="ModifierItemStyle" TargetType="ListBoxItem">
                                <Setter Property="Background" Value="{x:Null}"/>
                                <Setter Property="IsEnabled" Value="True" />
                                <Setter Property="Focusable" Value="True"/>
                                <Setter Property="ls:MoveFocus.Focusable" Value="True"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="ListBoxItem">
                                            <ControlTemplate.Resources>
                                                <ImageSource x:Key="BonusDisabledImage">pack://application:,,,/Core;component/Assets/ActiveRoll/ico_bonusDisabled.png</ImageSource>
                                            </ControlTemplate.Resources>
                                            <Grid>
                                                <Grid.RenderTransform>
                                                    <TransformGroup>
                                                        <ScaleTransform/>
                                                        <SkewTransform/>
                                                        <RotateTransform/>
                                                        <TranslateTransform />
                                                    </TransformGroup>
                                                </Grid.RenderTransform>
                                                <b:Interaction.Triggers>
                                                    <b:DataTrigger Binding="{Binding (ls:MoveFocus.IsFocused), RelativeSource={RelativeSource AncestorType=ListBoxItem}}" Value="True">
                                                        <ls:LSPlaySound Sound="UI_Shared_Hover" />
                                                    </b:DataTrigger>

                                                    <b:DataTrigger Binding="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType=ListBox}}" Value="BlinkHl">
                                                        <b:ControlStoryboardAction ControlStoryboardOption="Play">
                                                            <b:ControlStoryboardAction.Storyboard>
                                                                <Storyboard FillBehavior="Stop">
                                                                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="bgImgHL">
                                                                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                                                        <DiscreteObjectKeyFrame KeyTime="{StaticResource HLAnimTime2}" Value="{x:Static Visibility.Hidden}"/>
                                                                    </ObjectAnimationUsingKeyFrames>

                                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="bgImgHL">
                                                                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
                                                                        <LinearDoubleKeyFrame KeyTime="{StaticResource HLAnimTime1}" Value="1"/>
                                                                        <LinearDoubleKeyFrame KeyTime="{StaticResource HLAnimTime2}" Value="1"/>
                                                                        <LinearDoubleKeyFrame KeyTime="{StaticResource HLAnimTime3}" Value="0"/>
                                                                    </DoubleAnimationUsingKeyFrames>
                                                                </Storyboard>
                                                            </b:ControlStoryboardAction.Storyboard>
                                                        </b:ControlStoryboardAction>
                                                    </b:DataTrigger>

                                                    <b:DataTrigger Binding="{Binding Path=(ls:SequenceBehavior.PlayElement), RelativeSource={RelativeSource AncestorType=ListBoxItem}}" Value="True">
                                                        <b:ControlStoryboardAction ControlStoryboardOption="Play">
                                                            <b:ControlStoryboardAction.Storyboard>
                                                                <Storyboard Children="{StaticResource SlideInModAnim}"/>
                                                            </b:ControlStoryboardAction.Storyboard>
                                                        </b:ControlStoryboardAction>
                                                    </b:DataTrigger>
                                                </b:Interaction.Triggers>

                                                <Image x:Name="bgImg" Source="{StaticResource RollModifierBucketImage}" Stretch="None" VerticalAlignment="Top" Margin="-8,0,-8,0"/>
                                                <ContentPresenter x:Name="modContent"  Margin="0,30" VerticalAlignment="Top" />
                                                <Image x:Name="fgDisabledIco" Source="{StaticResource BonusDisabledImage}" Stretch="None" VerticalAlignment="Top" Visibility="{Binding IsDisabled, Converter={StaticResource BoolToVisibleConverter}}" Margin="-8,100,-8,0"/>
                                            </Grid>
                                            <ControlTemplate.Triggers>

                                                <Trigger Property="ls:MoveFocus.IsFocused" Value="True">
                                                    <Setter TargetName="bgImg" Property="Source" Value="{StaticResource RollModifierBucketImageHover}"/>
                                                </Trigger>

                                                <DataTrigger Binding="{Binding IsAdvantage}" Value="True">
                                                    <Setter Property="IsEnabled" Value="False"/>
                                                </DataTrigger>

                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsAdvantage}" Value="True"/>
                                                        <Condition Binding="{Binding DataContext.RollState,RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Value="WaitForStart"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="IsEnabled" Value="True"/>
                                                </MultiDataTrigger>

                                                <DataTrigger Binding="{Binding IsDisabled}" Value="True">
                                                    <Setter Property="Opacity" Value="{StaticResource DisabledOpacity}" TargetName="bgImg"/>
                                                    <Setter Property="Opacity" Value="{StaticResource DisabledOpacity}" TargetName="modContent"/>
                                                </DataTrigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Style.Triggers>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Opacity" Value="{StaticResource DisabledOpacity}"/>
                                        <Setter Property="Focusable" Value="False"/>
                                        <Setter Property="ls:MoveFocus.Focusable" Value="False"/>
                                    </Trigger>
                                    <DataTrigger Binding="{Binding DataContext.RollState,RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Value="ResultReady" >
                                        <Setter Property="IsEnabled" Value="False"/>
                                        <Setter Property="Focusable" Value="False"/>
                                        <Setter Property="ls:MoveFocus.Focusable" Value="False"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>

                            <Style TargetType="ListBox" BasedOn="{StaticResource {x:Type ListBox}}">
                                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled"/>
                                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
                                <Setter Property="Focusable" Value="False"/>
                                <Setter Property="ItemsPanel">
                                    <Setter.Value>
                                        <ItemsPanelTemplate>
                                            <VirtualizingStackPanel Orientation="Horizontal"/>
                                        </ItemsPanelTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Grid.Resources>

                        <StackPanel x:Name="BonussesTitle" Orientation="Horizontal" VerticalAlignment="Top" HorizontalAlignment="Center">
                            <StackPanel.Resources>
                                <Style TargetType="TextBlock" BasedOn="{StaticResource ActiveRollTextBlock}" >
                                    <Setter Property="FontSize" Value="{StaticResource ScaledMediumFontSize}"/>

                                </Style>
                            </StackPanel.Resources>
                            <TextBlock Text="{Binding Source=ha87d5467gfc76g42b7g82aega958176e3494 , Converter={StaticResource TranslatedStringConverter}, Mode=OneWay}" VerticalAlignment="Center"/>
                            <Control Template="{StaticResource MinMaxText}" VerticalAlignment="Center" Margin="20,0,0,0" FontSize="{StaticResource ScaledMediumFontSize}" Background="Transparent" Foreground="{StaticResource LS_extraspecialTxtColor}" noesis:Text.Stroke="{StaticResource LS_tint00}" noesis:Text.StrokeThickness="6"/>
                        </StackPanel>

                        <StackPanel>
                            <b:Interaction.Triggers>
                                <b:DataTrigger Binding="{Binding RollState}" Value="IntroductionAnimation" >
                                    <b:ChangePropertyAction TargetName="TopNavigationList" PropertyName="Opacity" Value="1" />
                                    <b:ChangePropertyAction TargetName="TopNavigationList" PropertyName="Visibility" Value="Visible" />
                                </b:DataTrigger>
                            </b:Interaction.Triggers>

                            <ls:LSScrollViewer x:Name="BonusHolder" Template="{StaticResource NoForcedStyleScrollViewerTemplate}" MaxWidth="1200" VerticalScrollBarVisibility="Disabled" HorizontalScrollBarVisibility="Auto" PanningMode="HorizontalOnly" HorizontalAlignment="Center">
                                <StackPanel x:Name="TopNavigationList" Margin="0,56,0,0"  IsEnabled="True" Opacity="1" HorizontalAlignment="Center" Orientation="Horizontal" MinHeight="400" >
                                    <b:Interaction.Triggers>
                                        <b:EventTrigger EventName="Loaded">
                                            <b:ChangePropertyAction TargetName="RollModSeq" PropertyName="Animate" Value="True"/>
                                        </b:EventTrigger>
                                        <b:DataTrigger Binding="{Binding ElementName=RollModSeq ,Path=SequenceCompleted}" Value="True">
                                            <b:ChangePropertyAction TargetName="RollAdvSeq" PropertyName="Animate" Value="True"/>
                                        </b:DataTrigger>
                                        <b:DataTrigger Binding="{Binding ActualWidth, ElementName=BoostList}" Value="0">
                                            <b:Interaction.Behaviors>
                                                <b:ConditionBehavior>
                                                    <b:ConditionalExpression>
                                                        <b:ComparisonCondition LeftOperand="{Binding HasBoostsToAdd}" Operator="Equal" RightOperand="True"/>
                                                    </b:ConditionalExpression>
                                                </b:ConditionBehavior>
                                            </b:Interaction.Behaviors>
                                            <b:ChangePropertyAction TargetName="BoostList" PropertyName="Visibility" Value="Hidden" />
                                            <ls:SetMoveFocusAction TargetName="ActiveRoll" FocusElement="{Binding ElementName=modlist}"/>
                                        </b:DataTrigger>
                                    </b:Interaction.Triggers>

                                    <Grid x:Name="ToolsHolder" Width="{StaticResource BoostContentHeight}" Visibility="Collapsed" Opacity="{StaticResource DisabledOpacity}" Focusable="False" ls:MoveFocus.Focusable="False" DataContext="{Binding ContextObject}" ls:TooltipExtender.Context="{Binding ContextObject}" ToolTipService.ShowOnDisabled="True" ToolTipService.Placement="Right">
                                        <Grid.ToolTip>
                                            <ls:LSTooltip Content="{Binding DataContext, ElementName=ToolsHolder}" ls:TooltipExtender.Owner="{Binding (ls:TooltipExtender.Owner), ElementName=ToolsHolder}"/>
                                        </Grid.ToolTip>

                                        <Image x:Name="ToolsHolderBG" Source="{StaticResource ItemModifierBucketImage}" Stretch="None" VerticalAlignment="Top" Margin="-18,0,-18,0"/>
                                        <Grid Height="{StaticResource BoostContentHeight}" Width="{StaticResource BoostContentWidth}" VerticalAlignment="Top" Background="Transparent" Margin="0,30,0,0">

                                            <TextBlock Text="{Binding Source=ha83f58cbg59d7g495cga578g0e945f86c83f , Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Center" VerticalAlignment="Top" Style="{StaticResource BonusValueTxtStyle}"/>

                                            <Image Source="{StaticResource ItemSlotImage}" Stretch="None" Margin="0,0,0,20"/>
                                            <ls:LSEntityObject Context="Inventory" EntityRef="{Binding EntityHandle}" Background="Transparent" Width="{StaticResource ItemIconSize}" Height="{StaticResource ItemIconSize}" VerticalAlignment="Center" Margin="0,0,0,20">
                                                <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource Template.GameObject}" IsHitTestVisible="False"/>
                                            </ls:LSEntityObject>

                                            <TextBlock x:Name="label" Tag="UI_HUD_DiceRoll_BonusType_Default" Text="{Binding Name}" VerticalAlignment="Bottom" Style="{StaticResource BonusNameTxtStyle}" />
                                        </Grid>
                                    </Grid>

                                    <ListBox x:Name="modlist" ItemsSource="{Binding Roll.Modifiers}" Template="{StaticResource MinimalItemsControlTemplate}" KeyboardNavigation.DirectionalNavigation="Continue" Visibility="{Binding Roll.Modifiers.Count, Converter={StaticResource CountToVisibilityConverter}}" ItemContainerStyle="{StaticResource ModifierItemStyle}">
                                        <b:Interaction.Behaviors>
                                            <ls:SequenceBehavior x:Name="RollModSeq" TimeOffset="0:0:0.2" CompletedDelay="0:0:0.2" />
                                        </b:Interaction.Behaviors>
                                    </ListBox>

                                    <ListBox ItemsSource="{Binding Roll.Advantages}" Template="{StaticResource MinimalItemsControlTemplate}" KeyboardNavigation.DirectionalNavigation="Continue" Visibility="{Binding Roll.Advantages.Count, Converter={StaticResource CountToVisibilityConverter}}" ItemContainerStyle="{StaticResource ModifierItemStyle}">
                                        <b:Interaction.Behaviors>
                                            <ls:SequenceBehavior x:Name="RollAdvSeq" TimeOffset="0:0:0.2"  />
                                        </b:Interaction.Behaviors>
                                    </ListBox>

                                    <Image x:Name="divider" VerticalAlignment="Top" Source="{StaticResource ActiveRollDividerImage}" Stretch="None" Margin="-64,-8,-64,0" Visibility="{Binding SelectedBoostModifierList.Count, Converter={StaticResource CountToVisibilityConverter}}" Focusable="False" ls:MoveFocus.Focusable="False">
                                        <Image.Style>
                                            <Style TargetType="Image">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Roll.Modifiers.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                                                        <Setter Property="Visibility" Value="Visible"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding Roll.Advantages.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                                                        <Setter Property="Visibility" Value="Visible"/>
                                                    </DataTrigger>

                                                    <DataTrigger Binding="{Binding Path=Visibility,ElementName=AdvantageHolder}" Value="Visible">
                                                        <Setter Property="Visibility" Value="Visible"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Image.Style>
                                    </Image>

                                    <ListBox x:Name="selectedboostmodlist" Opacity="1" ItemsSource="{Binding SelectedBoostModifierList}" AlternationCount="{Binding SelectedBoostModifierList.Count}" HorizontalAlignment="Center" VerticalAlignment="Top"  ScrollViewer.HorizontalScrollBarVisibility="Disabled" KeyboardNavigation.DirectionalNavigation="Continue" ScrollViewer.VerticalScrollBarVisibility="Disabled" Visibility="{Binding SelectedBoostModifierList.Count, Converter={StaticResource CountToVisibilityConverter}}" VerticalContentAlignment="Stretch" Template="{StaticResource MinimalItemsControlTemplate}">
                                        <ListBox.ItemContainerStyle>
                                            <Style TargetType="ListBoxItem">
                                                <Setter Property="Background" Value="{x:Null}"/>
                                                <Setter Property="Focusable" Value="True"/>
                                                <Setter Property="ls:MoveFocus.Focusable" Value="True"/>
                                                <Setter Property="Template" >
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="ListBoxItem">
                                                            <ControlTemplate.Resources>
                                                                <ImageSource x:Key="CompanionAidFrameImage">pack://application:,,,/Core;component/Assets/ActiveRoll/companionAidFrame.png</ImageSource>
                                                            </ControlTemplate.Resources>
                                                            <Grid>
                                                                <Image x:Name="bgImg" Source="{StaticResource RollModifierBucketImage}" Stretch="None" VerticalAlignment="Top" Margin="-8,0,-8,0"/>

                                                                <Grid Margin="0,30" VerticalAlignment="Top" >
                                                                    <Viewbox VerticalAlignment="Top" HorizontalAlignment="Center" Width="260" StretchDirection="DownOnly">
                                                                        <TextBlock x:Name="BonusTxt" Style="{StaticResource BonusValueTxtStyle}">
                                                                            <TextBlock.Tag>
                                                                                <MultiBinding Converter="{StaticResource EqualConverter}">
                                                                                    <Binding Path="MinBonusValue"/>
                                                                                    <Binding Path="MaxBonusValue"/>
                                                                                </MultiBinding>
                                                                            </TextBlock.Tag>
                                                                        </TextBlock>
                                                                    </Viewbox>
                                                                    <ContentPresenter Content="{Binding BoostModifier}"/>
                                                                </Grid>

                                                                <Grid VerticalAlignment="Top" HorizontalAlignment="Center" Margin="0,120,60,0">
                                                                    <ls:LSEntityObject EntityRef="{Binding Owner.EntityHandle}" ToolTipService.ShowOnDisabled="True" Background="Transparent">
                                                                        <ls:LSEntityObject.ToolTip>
                                                                            <ls:LSTooltip Content="{Binding Owner.Name}"  Placement="Top"/>
                                                                        </ls:LSEntityObject.ToolTip>
                                                                    </ls:LSEntityObject>

                                                                    <Grid VerticalAlignment="Bottom" HorizontalAlignment="Left" Margin="0,52,0,0">
                                                                        <Ellipse Fill="{Binding Owner.Icon}" Width="50" Height="50" />
                                                                        <Image Source="{StaticResource CompanionAidFrameImage}" Stretch="None"/>
                                                                    </Grid>
                                                                </Grid>

                                                                <ls:LSInputBinding PlayerId="{Binding DataContext.CurrentPlayer.PlayerId, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" BoundEvent="UIAccept" Focusable="False"
                                                                                Command="{Binding DataContext.RemoveModifierCommand, RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" CommandParameter="{Binding}">
                                                                    <b:Interaction.Triggers>
                                                                        <b:EventTrigger EventName="LSInputBindingReleased">
                                                                            <ls:LSPlaySound Sound="UI_HUD_DiceRoll_Bonus_Click" />
                                                                        </b:EventTrigger>
                                                                        <b:EventTrigger EventName="LSInputBindingPressed">
                                                                            <ls:LSPlaySound Sound="UI_HUD_DiceRoll_Bonus_Press" />
                                                                        </b:EventTrigger>
                                                                        <b:EventTrigger EventName="LSInputBindingPressed">
                                                                            <b:Interaction.Behaviors>
                                                                                <b:ConditionBehavior>
                                                                                    <b:ConditionalExpression>
                                                                                        <b:ComparisonCondition LeftOperand="{Binding (ItemsControl.AlternationIndex), RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Operator="GreaterThan" RightOperand="0"/>
                                                                                    </b:ConditionalExpression>
                                                                                </b:ConditionBehavior>
                                                                            </b:Interaction.Behaviors>
                                                                            <ls:SetMoveFocusAction TargetName="ActiveRoll" DirectionFocusSourceElement="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" DirectionFocus="Left"/>
                                                                        </b:EventTrigger>
                                                                        <b:EventTrigger EventName="LSInputBindingPressed">
                                                                            <b:Interaction.Behaviors>
                                                                                <b:ConditionBehavior>
                                                                                    <b:ConditionalExpression>
                                                                                        <b:ComparisonCondition LeftOperand="{Binding (ItemsControl.AlternationIndex), RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Operator="Equal" RightOperand="0"/>
                                                                                        <b:ComparisonCondition LeftOperand="{Binding (ItemsControl.AlternationCount), RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Operator="NotEqual" RightOperand="1"/>
                                                                                    </b:ConditionalExpression>
                                                                                </b:ConditionBehavior>
                                                                            </b:Interaction.Behaviors>
                                                                            <ls:SetMoveFocusAction TargetName="ActiveRoll" DirectionFocusSourceElement="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" DirectionFocus="Right"/>
                                                                        </b:EventTrigger>
                                                                        <b:EventTrigger EventName="LSInputBindingPressed">
                                                                            <b:Interaction.Behaviors>
                                                                                <b:ConditionBehavior>
                                                                                    <b:ConditionalExpression>
                                                                                        <b:ComparisonCondition LeftOperand="{Binding (ItemsControl.AlternationIndex), RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Operator="Equal" RightOperand="0"/>
                                                                                        <b:ComparisonCondition LeftOperand="{Binding (ItemsControl.AlternationCount), RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Operator="Equal" RightOperand="1"/>
                                                                                    </b:ConditionalExpression>
                                                                                </b:ConditionBehavior>
                                                                            </b:Interaction.Behaviors>
                                                                            <ls:SetMoveFocusAction TargetName="ActiveRoll" DirectionFocusSourceElement="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" DirectionFocus="Left"/>
                                                                        </b:EventTrigger>
                                                                    </b:Interaction.Triggers>
                                                                    <ls:LSInputBinding.Style>
                                                                        <Style TargetType="ls:LSInputBinding">
                                                                            <Setter Property="IsEnabled" Value="False"/>
                                                                            <Style.Triggers>
                                                                                <MultiDataTrigger>
                                                                                    <MultiDataTrigger.Conditions>
                                                                                        <Condition  Value="True">
                                                                                            <Condition.Binding>
                                                                                                <MultiBinding Converter="{StaticResource EqualConverter}">
                                                                                                    <Binding Path="DataContext.Owner.PlayerCharacterProperties.OwnerUserID" RelativeSource="{RelativeSource Mode=Self}"/>
                                                                                                    <Binding Path="DataContext.CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.OwnerUserID" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                                                                                </MultiBinding>
                                                                                            </Condition.Binding>
                                                                                        </Condition>
                                                                                        <Condition Binding="{Binding (ls:MoveFocus.IsFocused), RelativeSource={RelativeSource AncestorType=ListBoxItem}}" Value="True"/>
                                                                                    </MultiDataTrigger.Conditions>
                                                                                    <Setter Property="IsEnabled" Value="True"/>
                                                                                </MultiDataTrigger>
                                                                            </Style.Triggers>
                                                                        </Style>
                                                                    </ls:LSInputBinding.Style>
                                                                </ls:LSInputBinding>

                                                                <b:Interaction.Triggers>
                                                                    <b:DataTrigger Binding="{Binding (ls:MoveFocus.IsFocused), RelativeSource={RelativeSource AncestorType=ListBoxItem}}" Value="True">
                                                                        <ls:LSPlaySound Sound="UI_Shared_Hover" />
                                                                    </b:DataTrigger>

                                                                    <!-- When a selected boost is loaded, play a sound for if the boost adds/removes advantage or adds disadvantage -->
                                                                    <!-- NOTE: RollAdvantageType = the dice's advantage type WITH this bonus already applied and AdvantageType is this Bonus's advantage type -->
                                                                    <!-- Case Advantage + Disadvantage bonus, it gives a Flat roll (final advantage type will be None), play BonusRemoves_Advantage (very rare) -->
                                                                    <b:EventTrigger EventName="Loaded">
                                                                        <b:Interaction.Behaviors>
                                                                            <b:ConditionBehavior>
                                                                                <b:ConditionalExpression>
                                                                                    <b:ComparisonCondition LeftOperand="{Binding Path=DataContext.Roll.RollAdvantageType, RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Operator="Equal" RightOperand="None" />
                                                                                    <b:ComparisonCondition LeftOperand="{Binding AdvantageType}" Operator="Equal" RightOperand="Disadvantage" />
                                                                                </b:ConditionalExpression>
                                                                            </b:ConditionBehavior>
                                                                        </b:Interaction.Behaviors>
                                                                        <ls:LSPlaySound Sound="UI_HUD_DiceRoll_BonusRemoves_Advantage" />
                                                                    </b:EventTrigger>

                                                                    <!-- Case Disadvantage + Advantage bonus, it gives a Flat roll (final advantage type will be None), play BonusRemoves_Disadvantage (somewhat common) -->
                                                                    <b:EventTrigger EventName="Loaded">
                                                                        <b:Interaction.Behaviors>
                                                                            <b:ConditionBehavior>
                                                                                <b:ConditionalExpression>
                                                                                    <b:ComparisonCondition LeftOperand="{Binding Path=DataContext.Roll.RollAdvantageType, RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Operator="Equal" RightOperand="None" />
                                                                                    <b:ComparisonCondition LeftOperand="{Binding AdvantageType}" Operator="Equal" RightOperand="Advantage" />
                                                                                </b:ConditionalExpression>
                                                                            </b:ConditionBehavior>
                                                                        </b:Interaction.Behaviors>
                                                                        <ls:LSPlaySound Sound="UI_HUD_DiceRoll_BonusRemoves_Disadvantage" />
                                                                    </b:EventTrigger>

                                                                    <!-- Case flat roll + Advantage bonus, it gives an Advantage roll (final advantage type will be Advantage), play BonusAdds_Advantage (somewhat common) -->
                                                                    <b:EventTrigger EventName="Loaded">
                                                                        <b:Interaction.Behaviors>
                                                                            <b:ConditionBehavior>
                                                                                <b:ConditionalExpression>
                                                                                    <b:ComparisonCondition LeftOperand="{Binding Path=DataContext.Roll.RollAdvantageType, RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Operator="Equal" RightOperand="Advantage" />
                                                                                    <b:ComparisonCondition LeftOperand="{Binding AdvantageType}" Operator="Equal" RightOperand="Advantage" />
                                                                                </b:ConditionalExpression>
                                                                            </b:ConditionBehavior>
                                                                        </b:Interaction.Behaviors>
                                                                        <ls:LSPlaySound Sound="UI_HUD_DiceRoll_BonusAdds_Advantage" />
                                                                    </b:EventTrigger>

                                                                    <!--  Case flat roll + Disadvantage bonus, it gives an Disadvantage roll (final advantage type will be Disadvantage), play BonusAdds_Disadvantage (very rare) -->
                                                                    <b:EventTrigger EventName="Loaded">
                                                                        <b:Interaction.Behaviors>
                                                                            <b:ConditionBehavior>
                                                                                <b:ConditionalExpression>
                                                                                    <b:ComparisonCondition LeftOperand="{Binding Path=DataContext.Roll.RollAdvantageType, RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Operator="Equal" RightOperand="Disadvantage" />
                                                                                    <b:ComparisonCondition LeftOperand="{Binding AdvantageType}" Operator="Equal" RightOperand="Disadvantage" />
                                                                                </b:ConditionalExpression>
                                                                            </b:ConditionBehavior>
                                                                        </b:Interaction.Behaviors>
                                                                        <ls:LSPlaySound Sound="UI_HUD_DiceRoll_BonusAdds_Disadvantage" />
                                                                    </b:EventTrigger>
                                                                </b:Interaction.Triggers>


                                                            </Grid>
                                                            <ControlTemplate.Triggers>
                                                                <DataTrigger Binding="{Binding ElementName=BonusTxt, Path=Tag}" Value="True">
                                                                    <Setter TargetName="BonusTxt" Property="Text" >
                                                                        <Setter.Value>
                                                                            <MultiBinding StringFormat="{}{0:+#;-#;+0}">
                                                                                <Binding Path="MinBonusValue" />
                                                                            </MultiBinding>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding IsAdvantage}" Value="True">
                                                                    <Setter TargetName="BonusTxt" Property="Text" Value="{Binding Source=he770672cgd25bg4ec8g8bb6g6745e6e7576f  , Converter={StaticResource TranslatedStringConverter}, Mode=OneWay}"/>
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding DiceTypeSet.Amount,Converter={StaticResource GreaterThanConverter},ConverterParameter=0}" Value="True">
                                                                    <Setter TargetName="BonusTxt" Property="Text" Value="{Binding DiceTypeSet.Str, StringFormat='{}+{0}'}"/>
                                                                </DataTrigger>
                                                                <Trigger Property="ls:MoveFocus.IsFocused" Value="True">
                                                                    <Setter Property="Source" Value="{StaticResource RollModifierBucketImageHover}" TargetName="bgImg"/>
                                                                </Trigger>
                                                            </ControlTemplate.Triggers>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="IsEnabled" Value="True" />
                                                <Style.Triggers>
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter Property="Opacity" Value="{StaticResource DisabledOpacity}"/>
                                                    </Trigger>
                                                    <DataTrigger Binding="{Binding DataContext.RollState, RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Value="ResultReady" >
                                                        <Setter Property="IsEnabled" Value="False" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </ListBox.ItemContainerStyle>
                                    </ListBox>
                                </StackPanel>
                            </ls:LSScrollViewer>
                            <ls:LSNineSliceImage x:Name="BoostListHolder" ImageSource="{StaticResource BonusListBackground}" HorizontalAlignment="Center" Slices="150" Padding="52,16,52,60" Visibility="{Binding Visibility, ElementName=BoostList}" Opacity="{Binding Opacity, ElementName=BoostList}"  Margin="0,-300,0,0" MinHeight="320">
                                <Grid MinHeight="460">
                                    <ListBox x:Name="BoostList" 
                                             HorizontalAlignment="Center" 
                                             ItemsSource="{Binding NearbyPartyCharacters}" 
                                             ItemTemplate="{StaticResource ActiveRoll.PlayerPortraits}" 
                                             Background="Transparent" 
                                             ScrollViewer.VerticalScrollBarVisibility="Disabled" 
                                             BorderBrush="Transparent" 
                                             Visibility="Hidden" 
                                             Style="{StaticResource {x:Type ListBox}}"
                                             KeyboardNavigation.DirectionalNavigation="Contained">
                                        <ListBox.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <VirtualizingStackPanel IsItemsHost="True" Orientation="Horizontal"/>
                                            </ItemsPanelTemplate>
                                        </ListBox.ItemsPanel>
                                    </ListBox>

                                    <TextBlock x:Name="NoRemainingBoosts" 
                                               Text="{Binding Source=hba68b2b9g5615g42d1ga189g94228200d15b, Converter={StaticResource TranslatedStringConverter}}"
                                               Width="{Binding ActualWidth, ElementName=BoostList}"
                                               MinWidth="600"
                                               Margin="20"
                                               TextWrapping="Wrap"
                                               HorizontalAlignment="Center"
                                               VerticalAlignment="Center"
                                               TextAlignment="Center"
                                               Visibility="Collapsed"/>
                                </Grid>
                            </ls:LSNineSliceImage>
                        </StackPanel>

                        <Grid x:Name="BoostListBtn" Margin="-90,0,-90,98" VerticalAlignment="Bottom" Visibility="Collapsed">
                            <Image Source="{StaticResource AddBonusFrameImage}" Stretch="None"/>
                            <TextBlock HorizontalAlignment="Center" VerticalAlignment="Top" FontSize="{StaticResource LargeFontSize}" Margin="0,46,0,0" Foreground="{StaticResource LS_baseTxtColor}" Text="{Binding Source=h10b87da6ge266g44f0gaf03gec4ceb367dc8, Converter={StaticResource TranslatedStringConverter}, Mode=OneWay}"/>
                            <ls:LSButton VerticalAlignment="Bottom" Style="{StaticResource ControllerButtonIconOnly}" Margin="0,0,0,98"  DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIAddPoints'}" Width="{StaticResource ScaledControllerHintSize}" Height="{StaticResource ScaledControllerHintSize}">
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="LSButtonPressed" >
                                        <b:ChangePropertyAction TargetName="BoostList" PropertyName="Visibility" Value="Visible" />
                                        <ls:SetMoveFocusAction TargetName="ActiveRoll" FocusElement="{Binding ElementName=BoostList}"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>
                            </ls:LSButton>
                        </Grid>
                    </Grid>

                    <ContentControl x:Name="ResultHolder" Margin="0,694,0,0" HorizontalAlignment="Center" VerticalAlignment="Top" Style="{StaticResource ResultCountTemplateStyle}">
                        <Rectangle x:Name="AnimTargetPlaceHolder" HorizontalAlignment="Center" VerticalAlignment="Center" Width="4" Height="4" />
                    </ContentControl>

                    <Control x:Name="DieRollAnimation" IsHitTestVisible="False" Style="{StaticResource DieRollStyle}" VerticalAlignment="Top" Margin="0,-60,0,0">
                        <b:Interaction.Triggers>
                            <b:DataTrigger Binding="{Binding Path=Tag,ElementName=DieRollAnimation}" Value="AnimPlaying">
                                <b:ChangePropertyAction PropertyName="Tag" TargetName="ActiveRoll" Value="Rollingdice"/>
                            </b:DataTrigger>
                            <b:DataTrigger Binding="{Binding Path=Tag,ElementName=DieRollAnimation}" Value="AnimDone">
                                <b:ChangePropertyAction PropertyName="Tag" TargetName="ActiveRoll" Value="RevealResultAnimation"/>
                            </b:DataTrigger>
                        </b:Interaction.Triggers>
                    </Control>

                    <Grid x:Name="AnimationOverlayHolder" Tag="Init" IsHitTestVisible="False" Panel.ZIndex="100" Visibility="Hidden">

                        <ls:OverlayConnector x:Name="AnimationConnectorBaseBoosts" Source="{Binding ElementName=modlist}" >
                            <b:Interaction.Behaviors>
                                <ls:SequenceBehavior x:Name="AnimSeqBase" TimeOffset="0:0:0.8" CompletedDelay="0:0:1" />
                            </b:Interaction.Behaviors>
                        </ls:OverlayConnector>
                        <ls:OverlayConnector x:Name="AnimationConnectorSelectedBoosts" Source="{Binding ElementName=selectedboostmodlist}" >
                            <b:Interaction.Behaviors>
                                <ls:SequenceBehavior x:Name="AnimSeqSelected" TimeOffset="0:0:0.8" CompletedDelay="0:0:1.2" />
                            </b:Interaction.Behaviors>

                            <b:Interaction.Triggers>
                                <b:DataTrigger Binding="{Binding ElementName=AnimSeqBase ,Path=SequenceCompleted}" Value="True">
                                    <b:Interaction.Behaviors>
                                        <b:ConditionBehavior>
                                            <b:ConditionalExpression>
                                                <b:ComparisonCondition LeftOperand="{Binding ElementName=AnimationOverlayHolder,Path=Tag}" Operator="Equal" RightOperand="Step1"/>
                                            </b:ConditionalExpression>
                                        </b:ConditionBehavior>
                                    </b:Interaction.Behaviors>

                                    <b:ChangePropertyAction TargetName="AnimationOverlayHolder" PropertyName="Tag" Value="Step2"/>
                                    <b:ChangePropertyAction TargetName="AnimSeqSelected" PropertyName="Animate" Value="True"/>
                                </b:DataTrigger>

                            </b:Interaction.Triggers>
                        </ls:OverlayConnector>

                        <b:Interaction.Triggers>

                            <b:DataTrigger Binding="{Binding ElementName=AnimSeqSelected ,Path=SequenceCompleted}" Value="True">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding ElementName=AnimationOverlayHolder,Path=Tag}" Operator="Equal" RightOperand="Step2"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>
                                <b:InvokeCommandAction Command="{Binding TriggerNextPhaseCommand}"/>
                            </b:DataTrigger>

                            <b:DataTrigger Binding="{Binding Path=Tag,ElementName=ResultHolder}" Value="AnimDone">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding RollState}" Operator="Equal" RightOperand="StartRoll"/>
                                            <b:ComparisonCondition LeftOperand="{Binding FinalResult}" Operator="NotEqual" RightOperand="1"/>
                                            <b:ComparisonCondition LeftOperand="{Binding FinalResult}" Operator="NotEqual" RightOperand="20"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>
                                <b:ChangePropertyAction TargetName="AnimationOverlayHolder" PropertyName="Tag" Value="Step1"/>
                                <b:ChangePropertyAction TargetName="AnimSeqBase" PropertyName="Animate" Value="True"/>
                            </b:DataTrigger>

                            <b:DataTrigger Binding="{Binding Path=Tag,ElementName=ResultHolder}" Value="AnimDone">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding FinalResult}" Operator="Equal" RightOperand="20"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>
                                <b:InvokeCommandAction Command="{Binding TriggerNextPhaseCommand}"/>
                            </b:DataTrigger>

                            <b:DataTrigger Binding="{Binding Path=Tag,ElementName=ResultHolder}" Value="AnimDone">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding FinalResult}" Operator="Equal" RightOperand="1"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>
                                <b:InvokeCommandAction Command="{Binding TriggerNextPhaseCommand}"/>
                            </b:DataTrigger>
                        </b:Interaction.Triggers>
                    </Grid>
                </Grid>

                <ls:LSNineSliceImage x:Name="DiceSelector" Panel.ZIndex="99" Width="1024" MinHeight="828" ImageSource="pack://application:,,,/Core;component/Assets/Shared_c/c_filtersPanel_bg.png" VerticalAlignment="Bottom" HorizontalAlignment="Center" Slices="40" Margin="0,0,0,177" Padding="90, 40" Visibility="{Binding ElementName=DiceModToggle,Path=IsChecked,Converter={StaticResource BoolToVisibleConverter}, ConverterParameter=False}" >
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="134"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <TextBlock Text="{Binding Converter={StaticResource TranslatedStringConverter},Source=h0edd1324g5542g4a47g8201g2e0f5bc29630}" VerticalAlignment="Center" HorizontalAlignment="Center" TextAlignment="Center" Foreground="{StaticResource LS_extraspecialTxtColor}"/>

                        <ListBox Grid.Row="1" x:Name="DiceStyleList" ItemsSource="{Binding DiceStyleList}" SelectedItem="{Binding CurrentDiceStyle , Mode=OneWay}" ScrollViewer.HorizontalScrollBarVisibility="Disabled" >
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="SelectionChanged">
                                    <b:InvokeCommandAction Command="{Binding DataContext.SelectDiceTypeCommand, ElementName=ActiveRoll}" CommandParameter="{Binding ElementName=DiceStyleList, Path=SelectedItem}"/>
                                    <ls:LSPlaySound Sound="UI_Shared_CheckBox"/>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                            <ListBox.ItemContainerStyle>
                                <Style TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                                    <Setter Property="Focusable" Value="True"/>
                                    <Setter Property="ls:MoveFocus.Focusable" Value="True"/>
                                    <Setter Property="Template" Value="{StaticResource ListItemTemplate}"/>
                                </Style>
                            </ListBox.ItemContainerStyle>
                            <ListBox.ItemTemplate>
                                <DataTemplate DataType="{x:Type ls:VMDiceStyle}">
                                    <DataTemplate.Resources>
                                        <ImageSource x:Key="CheckImg">pack://application:,,,/Core;component/Assets/Shared_c/c_ico_bigTick.png</ImageSource>
                                        <Style TargetType="ls:AnimatedImage">
                                            <Setter Property="Template" Value="{StaticResource SizedAnimatedImage}" />
                                            <Setter Property="ClipSize" Value="256,256"/>
                                            <Setter Property="Margin" Value="0"/>
                                            <Setter Property="RepeatBehavior" Value="1x"/>
                                            <Setter Property="LastFrame" Value="20"/>
                                        </Style>
                                    </DataTemplate.Resources>
                                    <Grid x:Name="DiceStyleRoot" MinHeight="121"  Width="900" Focusable="True" ls:MoveFocus.Focusable="True" >
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="160"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="160"/>
                                        </Grid.ColumnDefinitions>
                                        <ls:AnimatedImage x:Name="DiceImg" Frame="20" Width="108" Height="108">
                                            <ls:AnimatedImage.Source>
                                                <MultiBinding Converter="{StaticResource DiceImageSourceConverter}">
                                                    <Binding Path="."/>
                                                    <Binding Source="/d20"/>
                                                </MultiBinding>
                                            </ls:AnimatedImage.Source>
                                        </ls:AnimatedImage>

                                        <TextBlock x:Name="nameTxt" Grid.Column="1" Text="{Binding Name}" VerticalAlignment="Center" TextAlignment="Left" Foreground="{StaticResource LS_baseTxtColor}" />
                                        <Image x:Name="check" Grid.Column="2" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="0,0,40,8" Source="{StaticResource CheckImg}" Stretch="None" Visibility="Collapsed"/>
                                        <b:Interaction.Triggers>
                                            <b:EventTrigger EventName="Loaded">
                                                <b:Interaction.Behaviors>
                                                    <b:ConditionBehavior>
                                                        <b:ConditionalExpression>
                                                            <b:ComparisonCondition LeftOperand="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Operator="Equal" RightOperand="True" />
                                                        </b:ConditionalExpression>
                                                    </b:ConditionBehavior>
                                                </b:Interaction.Behaviors>
                                                <ls:SetMoveFocusAction TargetName="ActiveRoll" FocusElement="{Binding ElementName=DiceStyleList}" />
                                            </b:EventTrigger>

                                            <b:DataTrigger Binding="{Binding (ls:MoveFocus.IsKeyboardFocusWithin), RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                                                <ls:LSPlaySound Sound="UI_Shared_Hover" />
                                            </b:DataTrigger>
                                        </b:Interaction.Triggers>
                                    </Grid>
                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding (ls:MoveFocus.IsKeyboardFocusWithin), RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                                            <Setter TargetName="nameTxt" Property="Foreground" Value="{StaticResource LS_tint100}"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                                            <Setter TargetName="check" Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>


                        <StackPanel Grid.Row="2" x:Name="CutomizeDiceControllerHints" Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Bottom" >

                            <ls:LSButton x:Name="selectButton" SoundID="" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UIAccept, Converter={StaticResource FindInputEventConverter}}" Tag="{Binding Source=hd0c08193ga7f2g4a7eg8225g63748c7b3096,Converter={StaticResource TranslatedStringConverter}}" BoundEvent="UIAccept" >
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="LSButtonPressed">
                                        <b:ChangePropertyAction TargetName="DiceStyleList" PropertyName="SelectedItem" Value="{Binding ElementName=ActiveRoll,Path=FocusedElement.DataContext}"/>
                                    </b:EventTrigger>
                                    <b:EventTrigger EventName="LSButtonReleased">
                                        <b:ChangePropertyAction TargetName="DiceModToggle" PropertyName="IsChecked" Value="False"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>
                            </ls:LSButton>

                            <ls:LSButton x:Name="CloseDicePanel" ContentTemplate="{StaticResource ControllerButtonHint}"
                         BoundEvent="UICancel"
                         Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UICancel'}"
                         Tag="{Binding Converter={StaticResource TranslatedStringConverter}, Source=h0d98c8cbg811eg40a5g958dg2552a3f4e350, Mode=OneWay}" >
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="LSButtonPressed">
                                        <b:ChangePropertyAction TargetName="DiceModToggle" PropertyName="IsChecked" Value="False"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>
                            </ls:LSButton>
                        </StackPanel>
                    </Grid>
                </ls:LSNineSliceImage>

                <ls:LSInputBinding x:Name="PinTooltipBinding" Style="{StaticResource PinTooltipBindingStyle}"/>
            </Grid>

            <ControlTemplate.Triggers>
                <Trigger SourceName="DiceSelector" Property="Visibility" Value="Visible">
                    <Setter Property="IsEnabled" Value="False" TargetName="ControllerHints"/>
                </Trigger>
                <Trigger Property="Tag" Value="RevealResultAnimation">
                    <Setter TargetName="AnimationOverlayHolder" Property="Visibility" Value="Visible" />
                </Trigger>

                <DataTrigger Binding="{Binding ShowUIElementTooltip, ElementName=ActiveRoll}" Value="True">
                    <Setter TargetName="ToggleTooltipBtn" Property="Tag" Value="{Binding Source='hb33ec471gd611g4ee3gbbffg699af8f79167', Converter={StaticResource TranslatedStringConverter}}"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding RollState}" Value="ResultReady" >
                    <Setter TargetName="AnimationOverlayHolder" Property="Visibility" Value="Hidden" />
                </DataTrigger>
                <DataTrigger Binding="{Binding RollContext}" Value="LockPick">
                    <Setter TargetName="ToolsHolder" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="ToolsHolder" Property="Focusable" Value="True"/>
                    <Setter TargetName="ToolsHolder" Property="ls:MoveFocus.Focusable" Value="True"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding RollContext}" Value="DisarmTrap">
                    <Setter TargetName="ToolsHolder" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="ToolsHolder" Property="Focusable" Value="True"/>
                    <Setter TargetName="ToolsHolder" Property="ls:MoveFocus.Focusable" Value="True"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding RollState}" Value="WaitForStart" >
                    <Setter TargetName="ToolsHolder" Property="Opacity" Value="1" />
                    <Setter TargetName="DiceModToggle" Property="Visibility" Value="Visible" />
                    <Setter TargetName="ToggleTooltipBtn" Property="Visibility" Value="Visible" />
                </DataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding RollState}" Value="WaitForStart"/>
                        <Condition Binding="{Binding Visibility, ElementName=BoostList}" Value="Visible"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="HideListBtn" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger>
                <DataTrigger Binding="{Binding DiceStyleList.Count,Converter={StaticResource GreaterThanConverter},ConverterParameter=1}" Value="False" >
                    <Setter TargetName="DiceModToggle" Property="Visibility" Value="Collapsed" />
                </DataTrigger>
                <DataTrigger Binding="{Binding CanRespondToCommands}" Value="False" >
                    <Setter TargetName="DiceModToggle" Property="Visibility" Value="Collapsed" />

                    <Setter TargetName="SuccessContinuePrompt"  Property="ls:TextBlockFormatter.SourceText">
                        <Setter.Value>
                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                <Binding Source="h1b4c497eg18a1g436eg9af5g28d16cf1ef2f"/>
                                <Binding Path="DataContext.SourceObject.Name" RelativeSource="{RelativeSource Mode=Self}"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>

                    <Setter TargetName="FailContinuePrompt" Property="ls:TextBlockFormatter.SourceText">
                        <Setter.Value>
                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                <Binding Source="h1b4c497eg18a1g436eg9af5g28d16cf1ef2f"/>
                                <Binding Path="DataContext.SourceObject.Name" RelativeSource="{RelativeSource Mode=Self}"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CanRespondToCommands}" Value="True"/>
                        <Condition Binding="{Binding RollContext}" Value="LockPick"/>
                        <Condition Binding="{Binding ContextObjectCount, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                    </MultiDataTrigger.Conditions>

                    <Setter TargetName="TryAgainHolder" Property="Visibility" Value="Visible" />
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CanRespondToCommands}" Value="False"/>
                        <Condition Binding="{Binding RollContext}" Value="LockPick"/>
                        <Condition Binding="{Binding ContextObjectCount, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                    </MultiDataTrigger.Conditions>

                    <Setter TargetName="FailContinuePrompt" Property="ls:TextBlockFormatter.SourceText">
                        <Setter.Value>
                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                <Binding Source="he06c0f84g0a9bg4679ga784gdfab1ea8908f"/>
                                <Binding Path="DataContext.SourceObject.Name" RelativeSource="{RelativeSource Mode=Self}"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CanRespondToCommands}" Value="True"/>
                        <Condition Binding="{Binding InspirationPoints, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                    </MultiDataTrigger.Conditions>

                    <Setter TargetName="InspirationRerollHolder" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CanRespondToCommands}" Value="False"/>
                        <Condition Binding="{Binding InspirationPoints, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                    </MultiDataTrigger.Conditions>

                    <Setter TargetName="InspirationRerollHolder" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="FailContinuePrompt" Property="ls:TextBlockFormatter.SourceText">
                        <Setter.Value>
                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                <Binding Source="he06c0f84g0a9bg4679ga784gdfab1ea8908f"/>
                                <Binding Path="DataContext.SourceObject.Name" RelativeSource="{RelativeSource Mode=Self}"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger>

                <DataTrigger Binding="{Binding RollState}" Value="WaitForReRoll" >
                    <Setter TargetName="ToolsHolder" Property="Opacity" Value="1" />
                    <Setter TargetName="DiceModToggle" Property="Visibility" Value="Visible" />
                    <Setter TargetName="ToggleTooltipBtn" Property="Visibility" Value="Visible" />
                </DataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding RollState}" Value="WaitForReRoll"/>
                        <Condition Binding="{Binding Visibility, ElementName=BoostList}" Value="Visible"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="HideListBtn" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger>
                <DataTrigger Binding="{Binding RollState}" Value="IntroductionAnimation" >
                    <Setter TargetName="ToolsHolder" Property="Opacity" Value="1" />
                </DataTrigger>

                <DataTrigger Binding="{Binding (ls:MoveFocus.IsFocused), ElementName=ToolsHolder}" Value="True">
                    <Setter TargetName="ToolsHolderBG" Property="Source" Value="{StaticResource ItemModifierBucketImageHover}"/>
                </DataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CanRespondToCommands}" Value="True"/>
                        <Condition Binding="{Binding RollState}" Value="StartRoll"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="SkipRollInput" Property="IsEnabled" Value="True"/>
                    <Setter TargetName="SkipRollInputRollTheDiceInput" Property="IsEnabled" Value="True"/>
                </MultiDataTrigger>

                <DataTrigger Binding="{Binding ActualWidth, ElementName=BoostList}" Value="0">
                    <Setter TargetName="NoRemainingBoosts" Property="Visibility" Value="Visible"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding Layout}" Value="Common">
                    <Setter TargetName="BonusHolder" Property="MaxWidth" Value="2000" />
                    <Setter TargetName="Root" Property="Background" Value="{StaticResource LS_PanelBackground}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.CharacterMode}" Value="InDialogue">
                    <Setter TargetName="Root" Property="Background" Value="{StaticResource LS_PanelBackground}" />
                </DataTrigger>

                <!-- Show 'add boost' promp only when there's boosts available, and during some stages of the activeroll -->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding HasBoostsToAdd}" Value="True"/>
                        <Condition Binding="{Binding RollState}" Value="WaitForStart"/>
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.Setters>
                        <Setter TargetName="BoostListBtn" Property="Visibility" Value="Visible" />
                    </MultiDataTrigger.Setters>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding HasBoostsToAdd}" Value="True"/>
                        <Condition Binding="{Binding RollState}" Value="WaitForReRoll"/>
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.Setters>
                        <Setter TargetName="BoostListBtn" Property="Visibility" Value="Visible" />
                    </MultiDataTrigger.Setters>
                </MultiDataTrigger>

                <Trigger SourceName="BoostListHolder" Property="IsVisible" Value="True">
                    <Setter TargetName="BoostListBtn" Property="Visibility" Value="Collapsed" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </ls:UIWidget.Template>
</ls:UIWidget>

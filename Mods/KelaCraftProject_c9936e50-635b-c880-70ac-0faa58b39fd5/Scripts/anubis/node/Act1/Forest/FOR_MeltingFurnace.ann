game.states.FOR_MeltingFurnace = State{
    function()
        ------------------------------------------------
        -- Local params
        params.firstStageBurningFX =  {type=EParamType.String, required=false, default="VFX_Script_Forge_Fire_01_7cf111b8-641d-6f24-35c7-1b6121648a2d",
            help=[[First stage VFX.]]}
        params.secondStageBurningFX =  {type=EParamType.String, required=false, default="VFX_Script_Forge_Fire_01_7cf111b8-641d-6f24-35c7-1b6121648a2d",
            help=[[First stage VFX.]]}
        params.startInSecondStage =  {type=EParamType.Bool, required=false, default=false,
                help=[[Does the forge start in the second stage.]]}
        ------------------------------------------------

        ------------------------------------------------
        -- Local variables
        local firstStageFlag = Flag("FOR_IncompleteMasterwork_State_FurnaceFirstStage_06d90851-37f8-47bb-9543-e0d33c8929df")
        local secondStageFlag = Flag("FOR_IncompleteMasterwork_State_FurnaceSecondStage_5682443b-4907-4fe5-acbd-67ef89a35388")

        local firstStageBurningFX
        local secondStageBurningFX

        local activeFX = nil
        -- For Patch7
        local currentStage = ""

        local firstStageLightRadius = 6.0
        local secondStageLightRadius = 10.0
        ------------------------------------------------

        ------------------------------------------------
        -- Helpers
        helpers.ClearBurningFX = function()
            if activeFX ~= nil then
                StopEffect(activeFX)
                activeFX = nil
            end
        end

        helpers.SetBurningFX = function(burningEffect)
            helpers.ClearBurningFX()
            activeFX = PlayEffectAt(burningEffect, me)
        end

        helpers.StartFirstBurningStage = function()

            -- SetEntityEvent(me, "helpers.StartFirstBurningStage", me)

            if not HasActiveStatus(me, "BURNING") then
                ApplyStatus(me, "BURNING", true, -1.0)
            end

            if firstStageBurningFX == nil then
                firstStageBurningFX = PrepareEffect(params.firstStageBurningFX)
            end

            DebugText(me, "Applying BURNING status")
            currentStage = "FirstStage"
            SetFlag(firstStageFlag, me)
            helpers.SetBurningFX(firstStageBurningFX)
            SwitchGameplayLight(me, true, firstStageLightRadius, true)

            -- KELA
            -- SetEntityEvent(me, "StartFirstBurningStage", me)
            ApplyStatus(me, "KELA_SMELTINGFORGE_AURA_STAGE_1", true, -1.0)
            RemoveStatus(me, "KELA_SMELTINGFORGE_AURA_STAGE_2")

        end

        helpers.StartSecondBurningStage = function()

            -- SetEntityEvent(me, "helpers.StartSecondBurningStage", me)

            if not HasActiveStatus(me, "BURNING") then
                ApplyStatus(me, "BURNING", true, -1.0)
            end
            
            if secondStageBurningFX == nil then
                secondStageBurningFX = PrepareEffect(params.secondStageBurningFX)
            end

            DebugText(me, "Starting second stage")
            currentStage = "SecondStage"
            ClearFlag(firstStageFlag, me)
            SetFlag(secondStageFlag, me)
            helpers.SetBurningFX(secondStageBurningFX)
            SwitchGameplayLight(me, true, secondStageLightRadius, true)

            -- KELA
            -- SetEntityEvent(me, "StartSecondBurningStage", me)
            ApplyStatus(me, "KELA_SMELTINGFORGE_AURA_STAGE_2", true, -1.0)
            RemoveStatus(me, "KELA_SMELTINGFORGE_AURA_STAGE_1")

        end

        helpers.RemoveBurningStatus = function()
            SwitchGameplayLight(me, false, 0.0, false)
            DebugText(me, "Removing BURNING status")
            ClearFlag(firstStageFlag, me)
            ClearFlag(secondStageFlag, me)
            helpers.ClearBurningFX()
            
            -- KELA
            -- SetEntityEvent(me, "RemoveBurningStatus", me)
            RemoveStatus(me, "KELA_SMELTINGFORGE_AURA_STAGE_1")
            RemoveStatus(me, "KELA_SMELTINGFORGE_AURA_STAGE_2")

        end

        helpers.ForceSecondStage = function()
            ClearFlag(firstStageFlag, me)
            helpers.ClearBurningFX()

            if not HasActiveStatus(me, "BURNING") then
                ApplyStatus(me, "BURNING", true, -1.0)
            end

            helpers.StartSecondBurningStage()
        end

        helpers.TryApplyBurning = function()
            if not HasActiveStatus(me, "BURNING") then
                ApplyStatus(me, "BURNING", true, -1.0)
                helpers.StartFirstBurningStage()
            end
        end
        ------------------------------------------------

        ------------------------------------------------
        -- State
        self.OnInit = function()
            firstStageBurningFX = PrepareEffect(params.firstStageBurningFX)
            secondStageBurningFX = PrepareEffect(params.secondStageBurningFX)
            if params.startInSecondStage then
                helpers.ForceSecondStage()
            end
        end
        ------------------------------------------------

        ------------------------------------------------
        -- Nodes
        nodes.Idle = Action{
            function()
                WaitForInterrupt()
            end
        }
        ------------------------------------------------

        ------------------------------------------------
        -- Events
        events.Damaged = function(e)
            if e.DamageType == DamageType.FIRE then
                helpers.TryApplyBurning()
            elseif e.DamageType == DamageType.RADIANT then
                helpers.TryApplyBurning()
            end
        end

        events.Dying = function(e)
            helpers.ClearBurningFX()
        end

        events.StatusApplied = function(e)
            if e.Status.StatusID == "BURNING" and not GetFlag(secondStageFlag, me) then
                helpers.StartFirstBurningStage()
            end
        end

        events.EntityEvent = function(e)
            if e.TargetEntity ~= me then
                return
            end

            -- Start the furnace
            if e.Event == "FOR_StartFurnace" then

                -- SetEntityEvent(me, "FOR_StartFurnace event", me)

                -- KELA
                -- if not HasActiveStatus(me, "BURNING") then
                --     ApplyStatus(me, "BURNING", true, -1.0)
                -- end
                if not HasActiveStatus(me, "BURNING") then
                    ApplyStatus(me, "BURNING", true, -1.0)
                else
                    RemoveStatus(me, "BURNING")
                end
            -- Kindle the furnace (second stage)
            elseif e.Event == "FOR_KindleFurnace" and HasActiveStatus(me, "BURNING") then

                -- SetEntityEvent(me, "FOR_KindleFurnace and BURNING", me)

                -- KELA
                -- helpers.StartSecondBurningStage()
                if GetFlag(firstStageFlag, me) then
                    -- SetEntityEvent(me, "firstStageFlag", me)
                    helpers.StartSecondBurningStage()
                else
                    -- SetEntityEvent(me, "NOT firstStageFlag", me)
                    helpers.StartFirstBurningStage()
                end 
            elseif e.Event == "FOR_KindleFurnace" then

                -- SetEntityEvent(me, "FOR_KindleFurnace NOT BURNING", me)

            end
        end

        events.StatusRemoved = function(e)
            if e.Status.StatusID == "BURNING" then
                currentStage = ""
                helpers.RemoveBurningStatus()
            end
        end
        ------------------------------------------------

        ------------------------------------------------
        -- FOR PATCH 7
        -- We need to store the current active VFX in the VFXManager. Remove once we can do that

        events.LevelLoaded = function(e)
            if e.Level == "WLD_Main_A" or e.Level == "SCL_Main_A" or e.Level == "CTY_LowerCity_A" or e.Level == "CTY_Main_A" then
                if currentStage == "FirstStage" then
                    helpers.StartFirstBurningStage()
                elseif currentStage == "SecondStage" then
                    helpers.StartSecondBurningStage()
                else
                    helpers.RemoveBurningStatus()
                end
            elseif e.Level == "BGO_BlacksmithCellar_A" or e.Level == "BGO_WyrmsCrossing_C" then
                if currentStage == "FirstStage" then
                    helpers.StartFirstBurningStage()
                elseif currentStage == "SecondStage" then
                    helpers.StartSecondBurningStage()
                else
                    helpers.TryApplyBurning()
                end
            end
            -- Last Light Inn Fallen
            -- HAV_Siege_State_NoProtection Set when Last Light inn doesn't have protection (Isobel kidnapped/dead) and there's no Nightsong at inn
            if e.Level == "SCL_Main_A" and GetFlag(Flag("HAV_Siege_State_NoProtection_2da0dbf1-88ca-4cab-9c8f-ee8921822958")) then
                if HasActiveStatus(me, "KELA_SMELTINGFORGE_AURA_LASTINN") then
                    RemoveStatus(me, "KELA_SMELTINGFORGE_AURA_LASTINN")
                end
                if not HasActiveStatus(me, "KELA_SMELTINGFORGE_AURA_CURSED") then
                    ApplyStatus(me, "KELA_SMELTINGFORGE_AURA_CURSED", true, -1.0)
                end
            elseif e.Level == "SCL_Main_A" and not GetFlag(Flag("HAV_Siege_State_NoProtection_2da0dbf1-88ca-4cab-9c8f-ee8921822958")) then
                if not HasActiveStatus(me, "KELA_SMELTINGFORGE_AURA_LASTINN") then
                    ApplyStatus(me, "KELA_SMELTINGFORGE_AURA_LASTINN", true, -1.0)
                end
            end

        end
        ------------------------------------------------
    end
}
